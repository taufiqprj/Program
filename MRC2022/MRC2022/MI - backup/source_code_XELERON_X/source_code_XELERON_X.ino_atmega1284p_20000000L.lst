
C:\Users\user\AppData\Local\Temp\arduino_build_664910/source_code_XELERON_X.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__dtors_end>
       4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
       8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
       c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      10:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_4>
      14:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_4>
      18:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_4>
      1c:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_4>
      20:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      24:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      28:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      2c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      30:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      34:	0c 94 be 09 	jmp	0x137c	; 0x137c <__vector_13>
      38:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      3c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      40:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      44:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      48:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__vector_18>
      4c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      50:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      54:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      58:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      5c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      60:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      64:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      68:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      6c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      70:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      74:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      78:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      7c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      80:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__vector_32>
      84:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      88:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	00 02       	muls	r16, r16
      90:	03 00       	.word	0x0003	; ????
      92:	0a 0b       	sbc	r16, r26
      94:	00 00       	nop
      96:	00 00       	nop
      98:	05 04       	cpc	r0, r5
      9a:	09 08       	sbc	r0, r9
	...

000000ac <digital_pin_to_bit_mask_PGM>:
      ac:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
      bc:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000000cc <digital_pin_to_port_PGM>:
      cc:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
      dc:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

000000ec <port_to_input_PGM>:
      ec:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

000000f6 <port_to_output_PGM>:
      f6:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

00000100 <port_to_mode_PGM>:
     100:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

0000010a <__ctors_start>:
__ctors_start():
     10a:	b3 04       	cpc	r11, r3

0000010c <__ctors_end>:
__dtors_start():
     10c:	e6 04       	cpc	r14, r6

0000010e <__dtors_end>:
__dtors_end():
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e4       	ldi	r29, 0x40	; 64
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     11a:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     11c:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     11e:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     120:	e2 ec       	ldi	r30, 0xC2	; 194
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     122:	f4 e2       	ldi	r31, 0x24	; 36
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     124:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     126:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     12a:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     12c:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     12e:	a4 30       	cpi	r26, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     130:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     134:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     136:	a4 e0       	ldi	r26, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     138:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     13e:	a8 31       	cpi	r26, 0x18	; 24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     140:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>

00000144 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     144:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     146:	c6 e8       	ldi	r28, 0x86	; 134
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     148:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     14a:	04 c0       	rjmp	.+8      	; 0x154 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     14c:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     14e:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     150:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     154:	c5 38       	cpi	r28, 0x85	; 133
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     156:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     158:	c9 f7       	brne	.-14     	; 0x14c <__do_global_ctors+0x8>
     15a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <main>
     15e:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <__do_global_dtors>

00000162 <__bad_interrupt>:
__vector_22():
     162:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000166 <hardwareInit()>:
_Z12hardwareInitv():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:22
      servoGrip.write(gripOff);
      delay(1000);
      gripperState = 0;
      break;
  }
}
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	42 e0       	ldi	r20, 0x02	; 2
     16a:	60 e1       	ldi	r22, 0x10	; 16
     16c:	89 e2       	ldi	r24, 0x29	; 41
     16e:	92 e0       	ldi	r25, 0x02	; 2
     170:	0e 94 42 08 	call	0x1084	; 0x1084 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>
     174:	62 e0       	ldi	r22, 0x02	; 2
     176:	82 e0       	ldi	r24, 0x02	; 2
     178:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
     17c:	62 e0       	ldi	r22, 0x02	; 2
     17e:	89 e1       	ldi	r24, 0x19	; 25
     180:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
     184:	62 e0       	ldi	r22, 0x02	; 2
     186:	8a e1       	ldi	r24, 0x1A	; 26
     188:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
     18c:	62 e0       	ldi	r22, 0x02	; 2
     18e:	85 e1       	ldi	r24, 0x15	; 21
     190:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
     194:	62 e0       	ldi	r22, 0x02	; 2
     196:	8f e1       	ldi	r24, 0x1F	; 31
     198:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
     19c:	62 e0       	ldi	r22, 0x02	; 2
     19e:	83 e1       	ldi	r24, 0x13	; 19
     1a0:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	84 e0       	ldi	r24, 0x04	; 4
     1a8:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	8b e0       	ldi	r24, 0x0B	; 11
     1b0:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
     1b4:	61 e0       	ldi	r22, 0x01	; 1
     1b6:	8e e0       	ldi	r24, 0x0E	; 14
     1b8:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
     1bc:	61 e0       	ldi	r22, 0x01	; 1
     1be:	89 e0       	ldi	r24, 0x09	; 9
     1c0:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
     1c4:	61 e0       	ldi	r22, 0x01	; 1
     1c6:	86 e1       	ldi	r24, 0x16	; 22
     1c8:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
     1cc:	61 e0       	ldi	r22, 0x01	; 1
     1ce:	87 e1       	ldi	r24, 0x17	; 23
     1d0:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
     1d4:	62 e0       	ldi	r22, 0x02	; 2
     1d6:	89 e0       	ldi	r24, 0x09	; 9
     1d8:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
     1dc:	61 e0       	ldi	r22, 0x01	; 1
     1de:	8f e0       	ldi	r24, 0x0F	; 15
     1e0:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
     1e4:	61 e0       	ldi	r22, 0x01	; 1
     1e6:	84 e0       	ldi	r24, 0x04	; 4
     1e8:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
     1ec:	61 e0       	ldi	r22, 0x01	; 1
     1ee:	89 e0       	ldi	r24, 0x09	; 9
     1f0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	8f e0       	ldi	r24, 0x0F	; 15
     1f8:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
     1fc:	62 e1       	ldi	r22, 0x12	; 18
     1fe:	70 e0       	ldi	r23, 0x00	; 0
     200:	86 e2       	ldi	r24, 0x26	; 38
     202:	92 e0       	ldi	r25, 0x02	; 2
     204:	0e 94 c3 0a 	call	0x1586	; 0x1586 <Servo::attach(int)>
     208:	64 e1       	ldi	r22, 0x14	; 20
     20a:	70 e0       	ldi	r23, 0x00	; 0
     20c:	83 e2       	ldi	r24, 0x23	; 35
     20e:	92 e0       	ldi	r25, 0x02	; 2
     210:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <Servo::attach(int)>

00000214 <waitButton()>:
_Z10waitButtonv():
     214:	89 e2       	ldi	r24, 0x29	; 41
     216:	92 e0       	ldi	r25, 0x02	; 2
     218:	0e 94 22 08 	call	0x1044	; 0x1044 <LiquidCrystal::clear()>
     21c:	66 e9       	ldi	r22, 0x96	; 150
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
     228:	82 e0       	ldi	r24, 0x02	; 2
     22a:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <digitalRead>
     22e:	89 2b       	or	r24, r25
     230:	d9 f3       	breq	.-10     	; 0x228 <waitButton()+0x14>
     232:	89 e1       	ldi	r24, 0x19	; 25
     234:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <digitalRead>
     238:	89 2b       	or	r24, r25
     23a:	b1 f3       	breq	.-20     	; 0x228 <waitButton()+0x14>
     23c:	8a e1       	ldi	r24, 0x1A	; 26
     23e:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <digitalRead>
     242:	89 2b       	or	r24, r25
     244:	89 f3       	breq	.-30     	; 0x228 <waitButton()+0x14>
     246:	85 e1       	ldi	r24, 0x15	; 21
     248:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <digitalRead>
     24c:	89 2b       	or	r24, r25
     24e:	61 f3       	breq	.-40     	; 0x228 <waitButton()+0x14>
     250:	8f e1       	ldi	r24, 0x1F	; 31
     252:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <digitalRead>
     256:	89 2b       	or	r24, r25
     258:	39 f3       	breq	.-50     	; 0x228 <waitButton()+0x14>
     25a:	83 e1       	ldi	r24, 0x13	; 19
     25c:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <digitalRead>
     260:	89 2b       	or	r24, r25
     262:	11 f3       	breq	.-60     	; 0x228 <waitButton()+0x14>
     264:	08 95       	ret

00000266 <setMotor(int, int)>:
_Z8setMotorii():
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	eb 01       	movw	r28, r22
     26c:	97 ff       	sbrs	r25, 7
     26e:	1a c0       	rjmp	.+52     	; 0x2a4 <setMotor(int, int)+0x3e>
     270:	66 27       	eor	r22, r22
     272:	77 27       	eor	r23, r23
     274:	68 1b       	sub	r22, r24
     276:	79 0b       	sbc	r23, r25
     278:	8c e0       	ldi	r24, 0x0C	; 12
     27a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <analogWrite>
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	8b e0       	ldi	r24, 0x0B	; 11
     282:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
     286:	d7 ff       	sbrs	r29, 7
     288:	16 c0       	rjmp	.+44     	; 0x2b6 <setMotor(int, int)+0x50>
     28a:	66 27       	eor	r22, r22
     28c:	77 27       	eor	r23, r23
     28e:	6c 1b       	sub	r22, r28
     290:	7d 0b       	sbc	r23, r29
     292:	8d e0       	ldi	r24, 0x0D	; 13
     294:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <analogWrite>
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	8e e0       	ldi	r24, 0x0E	; 14
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <digitalWrite>
     2a4:	6f ef       	ldi	r22, 0xFF	; 255
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	68 1b       	sub	r22, r24
     2aa:	79 0b       	sbc	r23, r25
     2ac:	8c e0       	ldi	r24, 0x0C	; 12
     2ae:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <analogWrite>
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	e5 cf       	rjmp	.-54     	; 0x280 <setMotor(int, int)+0x1a>
     2b6:	6f ef       	ldi	r22, 0xFF	; 255
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	6c 1b       	sub	r22, r28
     2bc:	7d 0b       	sbc	r23, r29
     2be:	8d e0       	ldi	r24, 0x0D	; 13
     2c0:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <analogWrite>
     2c4:	61 e0       	ldi	r22, 0x01	; 1
     2c6:	e9 cf       	rjmp	.-46     	; 0x29a <setMotor(int, int)+0x34>

000002c8 <stopMotor()>:
_Z9stopMotorv():
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	8d e0       	ldi	r24, 0x0D	; 13
     2ce:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <analogWrite>
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	8c e0       	ldi	r24, 0x0C	; 12
     2d8:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <analogWrite>
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	8b e0       	ldi	r24, 0x0B	; 11
     2e0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8e e0       	ldi	r24, 0x0E	; 14
     2e8:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
     2ec:	65 e0       	ldi	r22, 0x05	; 5
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
     2f8:	61 e0       	ldi	r22, 0x01	; 1
     2fa:	89 e0       	ldi	r24, 0x09	; 9
     2fc:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <digitalWrite>

00000300 <setSensor(unsigned char, unsigned char)>:
_Z9setSensorhh():
     300:	cf 93       	push	r28
     302:	c6 2f       	mov	r28, r22
     304:	68 2f       	mov	r22, r24
     306:	86 e1       	ldi	r24, 0x16	; 22
     308:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
     30c:	6c 2f       	mov	r22, r28
     30e:	87 e1       	ldi	r24, 0x17	; 23
     310:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
     314:	88 ec       	ldi	r24, 0xC8	; 200
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	cf 91       	pop	r28
     31a:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <delayMicroseconds>

0000031e <scanSensor()>:
_Z10scanSensorv():
     31e:	2f 92       	push	r2
     320:	3f 92       	push	r3
     322:	4f 92       	push	r4
     324:	5f 92       	push	r5
     326:	6f 92       	push	r6
     328:	7f 92       	push	r7
     32a:	8f 92       	push	r8
     32c:	9f 92       	push	r9
     32e:	af 92       	push	r10
     330:	bf 92       	push	r11
     332:	cf 92       	push	r12
     334:	df 92       	push	r13
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
     346:	c2 55       	subi	r28, 0x52	; 82
     348:	d1 09       	sbc	r29, r1
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	de bf       	out	0x3e, r29	; 62
     350:	0f be       	out	0x3f, r0	; 63
     352:	cd bf       	out	0x3d, r28	; 61
     354:	80 e1       	ldi	r24, 0x10	; 16
     356:	e3 e1       	ldi	r30, 0x13	; 19
     358:	f1 e0       	ldi	r31, 0x01	; 1
     35a:	de 01       	movw	r26, r28
     35c:	af 5b       	subi	r26, 0xBF	; 191
     35e:	bf 4f       	sbci	r27, 0xFF	; 255
     360:	01 90       	ld	r0, Z+
     362:	0d 92       	st	X+, r0
     364:	8a 95       	dec	r24
     366:	e1 f7       	brne	.-8      	; 0x360 <scanSensor()+0x42>
     368:	0e 94 0a 01 	call	0x214	; 0x214 <waitButton()>
     36c:	8e 01       	movw	r16, r28
     36e:	0f 5d       	subi	r16, 0xDF	; 223
     370:	1f 4f       	sbci	r17, 0xFF	; 255
     372:	ce 01       	movw	r24, r28
     374:	01 96       	adiw	r24, 0x01	; 1
     376:	7c 01       	movw	r14, r24
     378:	80 5c       	subi	r24, 0xC0	; 192
     37a:	9f 4f       	sbci	r25, 0xFF	; 255
     37c:	f7 01       	movw	r30, r14
     37e:	48 01       	movw	r8, r16
     380:	2f ef       	ldi	r18, 0xFF	; 255
     382:	33 e0       	ldi	r19, 0x03	; 3
     384:	d4 01       	movw	r26, r8
     386:	2d 93       	st	X+, r18
     388:	3d 93       	st	X+, r19
     38a:	4d 01       	movw	r8, r26
     38c:	11 92       	st	Z+, r1
     38e:	11 92       	st	Z+, r1
     390:	a8 17       	cp	r26, r24
     392:	b9 07       	cpc	r27, r25
     394:	b9 f7       	brne	.-18     	; 0x384 <scanSensor()+0x66>
     396:	d1 2c       	mov	r13, r1
     398:	c1 2c       	mov	r12, r1
     39a:	f7 01       	movw	r30, r14
     39c:	70 96       	adiw	r30, 0x10	; 16
     39e:	63 96       	adiw	r28, 0x13	; 19
     3a0:	ff af       	std	Y+63, r31	; 0x3f
     3a2:	ee af       	std	Y+62, r30	; 0x3e
     3a4:	63 97       	sbiw	r28, 0x13	; 19
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	0e 94 80 01 	call	0x300	; 0x300 <setSensor(unsigned char, unsigned char)>
     3ae:	5e 01       	movw	r10, r28
     3b0:	f1 e4       	ldi	r31, 0x41	; 65
     3b2:	af 0e       	add	r10, r31
     3b4:	b1 1c       	adc	r11, r1
     3b6:	15 01       	movw	r2, r10
     3b8:	88 e0       	ldi	r24, 0x08	; 8
     3ba:	28 0e       	add	r2, r24
     3bc:	31 1c       	adc	r3, r1
     3be:	38 01       	movw	r6, r16
     3c0:	27 01       	movw	r4, r14
     3c2:	d5 01       	movw	r26, r10
     3c4:	8d 91       	ld	r24, X+
     3c6:	5d 01       	movw	r10, r26
     3c8:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <analogRead>
     3cc:	f2 01       	movw	r30, r4
     3ce:	21 91       	ld	r18, Z+
     3d0:	31 91       	ld	r19, Z+
     3d2:	2f 01       	movw	r4, r30
     3d4:	28 17       	cp	r18, r24
     3d6:	39 07       	cpc	r19, r25
     3d8:	1c f4       	brge	.+6      	; 0x3e0 <scanSensor()+0xc2>
     3da:	32 97       	sbiw	r30, 0x02	; 2
     3dc:	91 83       	std	Z+1, r25	; 0x01
     3de:	80 83       	st	Z, r24
     3e0:	d3 01       	movw	r26, r6
     3e2:	2d 91       	ld	r18, X+
     3e4:	3d 91       	ld	r19, X+
     3e6:	3d 01       	movw	r6, r26
     3e8:	82 17       	cp	r24, r18
     3ea:	93 07       	cpc	r25, r19
     3ec:	24 f4       	brge	.+8      	; 0x3f6 <scanSensor()+0xd8>
     3ee:	fd 01       	movw	r30, r26
     3f0:	32 97       	sbiw	r30, 0x02	; 2
     3f2:	91 83       	std	Z+1, r25	; 0x01
     3f4:	80 83       	st	Z, r24
     3f6:	a2 14       	cp	r10, r2
     3f8:	b3 04       	cpc	r11, r3
     3fa:	19 f7       	brne	.-58     	; 0x3c2 <scanSensor()+0xa4>
     3fc:	61 e0       	ldi	r22, 0x01	; 1
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	0e 94 80 01 	call	0x300	; 0x300 <setSensor(unsigned char, unsigned char)>
     410:	51 e4       	ldi	r21, 0x41	; 65
     412:	45 2e       	mov	r4, r21
     414:	51 2c       	mov	r5, r1
     416:	4c 0e       	add	r4, r28
     418:	5d 1e       	adc	r5, r29
     41a:	b8 e0       	ldi	r27, 0x08	; 8
     41c:	4b 0e       	add	r4, r27
     41e:	51 1c       	adc	r5, r1
     420:	3e 01       	movw	r6, r28
     422:	e1 e3       	ldi	r30, 0x31	; 49
     424:	6e 0e       	add	r6, r30
     426:	71 1c       	adc	r7, r1
     428:	57 01       	movw	r10, r14
     42a:	d2 01       	movw	r26, r4
     42c:	8d 91       	ld	r24, X+
     42e:	2d 01       	movw	r4, r26
     430:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <analogRead>
     434:	f5 01       	movw	r30, r10
     436:	20 89       	ldd	r18, Z+16	; 0x10
     438:	31 89       	ldd	r19, Z+17	; 0x11
     43a:	28 17       	cp	r18, r24
     43c:	39 07       	cpc	r19, r25
     43e:	14 f4       	brge	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     440:	91 8b       	std	Z+17, r25	; 0x11
     442:	80 8b       	std	Z+16, r24	; 0x10
     444:	d3 01       	movw	r26, r6
     446:	2d 91       	ld	r18, X+
     448:	3d 91       	ld	r19, X+
     44a:	3d 01       	movw	r6, r26
     44c:	82 17       	cp	r24, r18
     44e:	93 07       	cpc	r25, r19
     450:	24 f4       	brge	.+8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     452:	fd 01       	movw	r30, r26
     454:	32 97       	sbiw	r30, 0x02	; 2
     456:	91 83       	std	Z+1, r25	; 0x01
     458:	80 83       	st	Z, r24
     45a:	b2 e0       	ldi	r27, 0x02	; 2
     45c:	ab 0e       	add	r10, r27
     45e:	b1 1c       	adc	r11, r1
     460:	63 96       	adiw	r28, 0x13	; 19
     462:	ee ad       	ldd	r30, Y+62	; 0x3e
     464:	ff ad       	ldd	r31, Y+63	; 0x3f
     466:	63 97       	sbiw	r28, 0x13	; 19
     468:	ea 15       	cp	r30, r10
     46a:	fb 05       	cpc	r31, r11
     46c:	f1 f6       	brne	.-68     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     46e:	61 e0       	ldi	r22, 0x01	; 1
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	0e 94 80 01 	call	0x300	; 0x300 <setSensor(unsigned char, unsigned char)>
     482:	40 e0       	ldi	r20, 0x00	; 0
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	89 e2       	ldi	r24, 0x29	; 41
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	0e 94 29 08 	call	0x1052	; 0x1052 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     48e:	6d e4       	ldi	r22, 0x4D	; 77
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	89 e2       	ldi	r24, 0x29	; 41
     494:	92 e0       	ldi	r25, 0x02	; 2
     496:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Print::print(char const*)>
     49a:	41 e0       	ldi	r20, 0x01	; 1
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	89 e2       	ldi	r24, 0x29	; 41
     4a0:	92 e0       	ldi	r25, 0x02	; 2
     4a2:	0e 94 29 08 	call	0x1052	; 0x1052 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     4a6:	66 e5       	ldi	r22, 0x56	; 86
     4a8:	71 e0       	ldi	r23, 0x01	; 1
     4aa:	89 e2       	ldi	r24, 0x29	; 41
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Print::print(char const*)>
     4b2:	ff ef       	ldi	r31, 0xFF	; 255
     4b4:	cf 1a       	sub	r12, r31
     4b6:	df 0a       	sbc	r13, r31
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	68 e0       	ldi	r22, 0x08	; 8
     4bc:	88 ec       	ldi	r24, 0xC8	; 200
     4be:	c8 16       	cp	r12, r24
     4c0:	d1 04       	cpc	r13, r1
     4c2:	0c f0       	brlt	.+2      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4c4:	5e c0       	rjmp	.+188    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
     4c6:	89 e2       	ldi	r24, 0x29	; 41
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	0e 94 29 08 	call	0x1052	; 0x1052 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     4ce:	67 e6       	ldi	r22, 0x67	; 103
     4d0:	71 e0       	ldi	r23, 0x01	; 1
     4d2:	89 e2       	ldi	r24, 0x29	; 41
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Print::print(char const*)>
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <digitalRead>
     4e0:	89 2b       	or	r24, r25
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4e4:	6d c0       	rjmp	.+218    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     4e6:	85 e1       	ldi	r24, 0x15	; 21
     4e8:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <digitalRead>
     4ec:	89 2b       	or	r24, r25
     4ee:	09 f0       	breq	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4f0:	5a cf       	rjmp	.-332    	; 0x3a6 <scanSensor()+0x88>
     4f2:	0e 94 0a 01 	call	0x214	; 0x214 <waitButton()>
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	89 e2       	ldi	r24, 0x29	; 41
     4fc:	92 e0       	ldi	r25, 0x02	; 2
     4fe:	0e 94 29 08 	call	0x1052	; 0x1052 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     502:	63 e7       	ldi	r22, 0x73	; 115
     504:	71 e0       	ldi	r23, 0x01	; 1
     506:	89 e2       	ldi	r24, 0x29	; 41
     508:	92 e0       	ldi	r25, 0x02	; 2
     50a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Print::print(char const*)>
     50e:	64 ef       	ldi	r22, 0xF4	; 244
     510:	71 e0       	ldi	r23, 0x01	; 1
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
     51a:	8d e4       	ldi	r24, 0x4D	; 77
     51c:	e8 2e       	mov	r14, r24
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	f8 2e       	mov	r15, r24
     522:	10 e0       	ldi	r17, 0x00	; 0
     524:	00 e0       	ldi	r16, 0x00	; 0
_ZN11EEPROMClass3putI10eepromDataEERKT_iS4_():
     526:	f7 01       	movw	r30, r14
     528:	d1 90       	ld	r13, Z+
     52a:	7f 01       	movw	r14, r30
_ZNK5EERefdeEv():
     52c:	c8 01       	movw	r24, r16
     52e:	0e 94 3e 12 	call	0x247c	; 0x247c <eeprom_read_byte>
_ZN5EERef6updateEh():
     532:	d8 16       	cp	r13, r24
     534:	21 f0       	breq	.+8      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
_ZN5EERefaSEh():
     536:	6d 2d       	mov	r22, r13
     538:	c8 01       	movw	r24, r16
     53a:	0e 94 46 12 	call	0x248c	; 0x248c <eeprom_write_byte>
     53e:	0f 5f       	subi	r16, 0xFF	; 255
     540:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3putI10eepromDataEERKT_iS4_():
     542:	00 32       	cpi	r16, 0x20	; 32
     544:	11 05       	cpc	r17, r1
     546:	79 f7       	brne	.-34     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
_Z10scanSensorv():
     548:	89 e2       	ldi	r24, 0x29	; 41
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	ce 5a       	subi	r28, 0xAE	; 174
     54e:	df 4f       	sbci	r29, 0xFF	; 255
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	ff 90       	pop	r15
     564:	ef 90       	pop	r14
     566:	df 90       	pop	r13
     568:	cf 90       	pop	r12
     56a:	bf 90       	pop	r11
     56c:	af 90       	pop	r10
     56e:	9f 90       	pop	r9
     570:	8f 90       	pop	r8
     572:	7f 90       	pop	r7
     574:	6f 90       	pop	r6
     576:	5f 90       	pop	r5
     578:	4f 90       	pop	r4
     57a:	3f 90       	pop	r3
     57c:	2f 90       	pop	r2
     57e:	0c 94 22 08 	jmp	0x1044	; 0x1044 <LiquidCrystal::clear()>
     582:	91 e9       	ldi	r25, 0x91	; 145
     584:	c9 16       	cp	r12, r25
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	d9 06       	cpc	r13, r25
     58a:	9c f0       	brlt	.+38     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     58c:	89 e2       	ldi	r24, 0x29	; 41
     58e:	92 e0       	ldi	r25, 0x02	; 2
     590:	0e 94 29 08 	call	0x1052	; 0x1052 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     594:	6b e6       	ldi	r22, 0x6B	; 107
     596:	71 e0       	ldi	r23, 0x01	; 1
     598:	89 e2       	ldi	r24, 0x29	; 41
     59a:	92 e0       	ldi	r25, 0x02	; 2
     59c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Print::print(char const*)>
     5a0:	a9 e5       	ldi	r26, 0x59	; 89
     5a2:	ca 16       	cp	r12, r26
     5a4:	a2 e0       	ldi	r26, 0x02	; 2
     5a6:	da 06       	cpc	r13, r26
     5a8:	0c f4       	brge	.+2      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     5aa:	97 cf       	rjmp	.-210    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     5ac:	d1 2c       	mov	r13, r1
     5ae:	c1 2c       	mov	r12, r1
     5b0:	94 cf       	rjmp	.-216    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     5b2:	89 e2       	ldi	r24, 0x29	; 41
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	0e 94 29 08 	call	0x1052	; 0x1052 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     5ba:	6f e6       	ldi	r22, 0x6F	; 111
     5bc:	71 e0       	ldi	r23, 0x01	; 1
     5be:	ec cf       	rjmp	.-40     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     5c0:	0e 94 0a 01 	call	0x214	; 0x214 <waitButton()>
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	89 e2       	ldi	r24, 0x29	; 41
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	0e 94 29 08 	call	0x1052	; 0x1052 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     5d0:	64 e8       	ldi	r22, 0x84	; 132
     5d2:	71 e0       	ldi	r23, 0x01	; 1
     5d4:	89 e2       	ldi	r24, 0x29	; 41
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Print::print(char const*)>
     5dc:	64 ef       	ldi	r22, 0xF4	; 244
     5de:	71 e0       	ldi	r23, 0x01	; 1
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
     5e8:	ed e4       	ldi	r30, 0x4D	; 77
     5ea:	f2 e0       	ldi	r31, 0x02	; 2
     5ec:	d8 01       	movw	r26, r16
     5ee:	2d 91       	ld	r18, X+
     5f0:	3d 91       	ld	r19, X+
     5f2:	8d 01       	movw	r16, r26
     5f4:	d7 01       	movw	r26, r14
     5f6:	8d 91       	ld	r24, X+
     5f8:	9d 91       	ld	r25, X+
     5fa:	7d 01       	movw	r14, r26
     5fc:	82 1b       	sub	r24, r18
     5fe:	93 0b       	sbc	r25, r19
     600:	97 fd       	sbrc	r25, 7
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	95 95       	asr	r25
     606:	87 95       	ror	r24
     608:	82 0f       	add	r24, r18
     60a:	93 1f       	adc	r25, r19
     60c:	81 93       	st	Z+, r24
     60e:	91 93       	st	Z+, r25
     610:	08 15       	cp	r16, r8
     612:	19 05       	cpc	r17, r9
     614:	59 f7       	brne	.-42     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     616:	81 cf       	rjmp	.-254    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>

00000618 <welcomeScreen()>:
_Z13welcomeScreenv():
     618:	89 e2       	ldi	r24, 0x29	; 41
     61a:	92 e0       	ldi	r25, 0x02	; 2
     61c:	0e 94 22 08 	call	0x1044	; 0x1044 <LiquidCrystal::clear()>
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	89 e2       	ldi	r24, 0x29	; 41
     626:	92 e0       	ldi	r25, 0x02	; 2
     628:	0e 94 29 08 	call	0x1052	; 0x1052 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     62c:	65 e9       	ldi	r22, 0x95	; 149
     62e:	71 e0       	ldi	r23, 0x01	; 1
     630:	89 e2       	ldi	r24, 0x29	; 41
     632:	92 e0       	ldi	r25, 0x02	; 2
     634:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Print::print(char const*)>
     638:	41 e0       	ldi	r20, 0x01	; 1
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	89 e2       	ldi	r24, 0x29	; 41
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	0e 94 29 08 	call	0x1052	; 0x1052 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     644:	66 ea       	ldi	r22, 0xA6	; 166
     646:	71 e0       	ldi	r23, 0x01	; 1
     648:	89 e2       	ldi	r24, 0x29	; 41
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Print::print(char const*)>
     650:	64 ef       	ldi	r22, 0xF4	; 244
     652:	71 e0       	ldi	r23, 0x01	; 1
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
     65c:	89 e2       	ldi	r24, 0x29	; 41
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	0c 94 22 08 	jmp	0x1044	; 0x1044 <LiquidCrystal::clear()>

00000664 <followLine()>:
_Z10followLinev():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:26

//void followLine(int modeFollow) {
void followLine() {
  switch (sensorValue) {
     664:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <sensorValue>
     668:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <sensorValue+0x1>
     66c:	80 36       	cpi	r24, 0x60	; 96
     66e:	91 05       	cpc	r25, r1
     670:	09 f4       	brne	.+2      	; 0x674 <followLine()+0x10>
     672:	00 c1       	rjmp	.+512    	; 0x874 <followLine()+0x210>
     674:	0c f0       	brlt	.+2      	; 0x678 <followLine()+0x14>
     676:	98 c0       	rjmp	.+304    	; 0x7a8 <followLine()+0x144>
     678:	8c 30       	cpi	r24, 0x0C	; 12
     67a:	91 05       	cpc	r25, r1
     67c:	09 f4       	brne	.+2      	; 0x680 <followLine()+0x1c>
     67e:	05 c1       	rjmp	.+522    	; 0x88a <followLine()+0x226>
     680:	0c f0       	brlt	.+2      	; 0x684 <followLine()+0x20>
     682:	69 c0       	rjmp	.+210    	; 0x756 <followLine()+0xf2>
     684:	84 30       	cpi	r24, 0x04	; 4
     686:	91 05       	cpc	r25, r1
     688:	09 f4       	brne	.+2      	; 0x68c <followLine()+0x28>
     68a:	75 c0       	rjmp	.+234    	; 0x776 <followLine()+0x112>
     68c:	0c f0       	brlt	.+2      	; 0x690 <followLine()+0x2c>
     68e:	55 c0       	rjmp	.+170    	; 0x73a <followLine()+0xd6>
     690:	82 30       	cpi	r24, 0x02	; 2
     692:	91 05       	cpc	r25, r1
     694:	09 f4       	brne	.+2      	; 0x698 <followLine()+0x34>
     696:	0b c1       	rjmp	.+534    	; 0x8ae <followLine()+0x24a>
     698:	0c f0       	brlt	.+2      	; 0x69c <followLine()+0x38>
     69a:	fa c0       	rjmp	.+500    	; 0x890 <followLine()+0x22c>
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	09 f4       	brne	.+2      	; 0x6a2 <followLine()+0x3e>
     6a0:	fa c0       	rjmp	.+500    	; 0x896 <followLine()+0x232>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:158
    else if (!sensorLeft && sensorRight) error = -20;
    else error = 0;
    }
  */

  rate = error - lastError;
     6a2:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <error>
     6a6:	30 91 48 02 	lds	r19, 0x0248	; 0x800248 <error+0x1>
     6aa:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <lastError>
     6ae:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <lastError+0x1>
     6b2:	a9 01       	movw	r20, r18
     6b4:	48 1b       	sub	r20, r24
     6b6:	59 0b       	sbc	r21, r25
     6b8:	ca 01       	movw	r24, r20
     6ba:	50 93 4a 02 	sts	0x024A, r21	; 0x80024a <rate+0x1>
     6be:	40 93 49 02 	sts	0x0249, r20	; 0x800249 <rate>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:159
  powerLeft = (int)((runningSpeed + (error * kp)) + (rate * kd));
     6c2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <kp>
     6c6:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <kp+0x1>
     6ca:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <runningSpeed>
     6ce:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <runningSpeed+0x1>
     6d2:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <kd>
     6d6:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <kd+0x1>
     6da:	8a 9f       	mul	r24, r26
     6dc:	a0 01       	movw	r20, r0
     6de:	8b 9f       	mul	r24, r27
     6e0:	50 0d       	add	r21, r0
     6e2:	9a 9f       	mul	r25, r26
     6e4:	50 0d       	add	r21, r0
     6e6:	11 24       	eor	r1, r1
     6e8:	2e 9f       	mul	r18, r30
     6ea:	c0 01       	movw	r24, r0
     6ec:	2f 9f       	mul	r18, r31
     6ee:	90 0d       	add	r25, r0
     6f0:	3e 9f       	mul	r19, r30
     6f2:	90 0d       	add	r25, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	86 0f       	add	r24, r22
     6f8:	97 1f       	adc	r25, r23
     6fa:	84 0f       	add	r24, r20
     6fc:	95 1f       	adc	r25, r21
     6fe:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <powerLeft+0x1>
     702:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <powerLeft>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:160
  powerRight = (int)((runningSpeed + (-error * kp)) - (rate * kd));
     706:	2e 9f       	mul	r18, r30
     708:	d0 01       	movw	r26, r0
     70a:	2f 9f       	mul	r18, r31
     70c:	b0 0d       	add	r27, r0
     70e:	3e 9f       	mul	r19, r30
     710:	b0 0d       	add	r27, r0
     712:	11 24       	eor	r1, r1
     714:	6a 1b       	sub	r22, r26
     716:	7b 0b       	sbc	r23, r27
     718:	64 1b       	sub	r22, r20
     71a:	75 0b       	sbc	r23, r21
     71c:	70 93 42 02 	sts	0x0242, r23	; 0x800242 <powerRight+0x1>
     720:	60 93 41 02 	sts	0x0241, r22	; 0x800241 <powerRight>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:163
  constrain(powerLeft, minSpeed, maxSpeed);
  constrain(powerRight, minSpeed, maxSpeed);
  setMotor(powerLeft, powerRight);
     724:	0e 94 33 01 	call	0x266	; 0x266 <setMotor(int, int)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:164
  lastError = error;
     728:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <error>
     72c:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <error+0x1>
     730:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <lastError+0x1>
     734:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <lastError>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:165
}
     738:	08 95       	ret
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:26
  }
}

//void followLine(int modeFollow) {
void followLine() {
  switch (sensorValue) {
     73a:	87 30       	cpi	r24, 0x07	; 7
     73c:	91 05       	cpc	r25, r1
     73e:	09 f4       	brne	.+2      	; 0x742 <followLine()+0xde>
     740:	b6 c0       	rjmp	.+364    	; 0x8ae <followLine()+0x24a>
     742:	88 30       	cpi	r24, 0x08	; 8
     744:	91 05       	cpc	r25, r1
     746:	09 f4       	brne	.+2      	; 0x74a <followLine()+0xe6>
     748:	af c0       	rjmp	.+350    	; 0x8a8 <followLine()+0x244>
     74a:	06 97       	sbiw	r24, 0x06	; 6
     74c:	09 f0       	breq	.+2      	; 0x750 <followLine()+0xec>
     74e:	a9 cf       	rjmp	.-174    	; 0x6a2 <followLine()+0x3e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:52
    case 0b000000011000 : error = 7;      break;
    //case 0b000000110110 : error=7;      break;
    case 0b000000001000 : error = 11;     break;
    case 0b000000001100 : error = 15;     break;
    case 0b000000000100 : error = 17;     break;
    case 0b000000000110 : error = 21;     break;
     750:	85 e1       	ldi	r24, 0x15	; 21
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	7e c0       	rjmp	.+252    	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:26
  }
}

//void followLine(int modeFollow) {
void followLine() {
  switch (sensorValue) {
     756:	8c 31       	cpi	r24, 0x1C	; 28
     758:	91 05       	cpc	r25, r1
     75a:	09 f4       	brne	.+2      	; 0x75e <followLine()+0xfa>
     75c:	a5 c0       	rjmp	.+330    	; 0x8a8 <followLine()+0x244>
     75e:	74 f4       	brge	.+28     	; 0x77c <followLine()+0x118>
     760:	80 31       	cpi	r24, 0x10	; 16
     762:	91 05       	cpc	r25, r1
     764:	09 f4       	brne	.+2      	; 0x768 <followLine()+0x104>
     766:	9d c0       	rjmp	.+314    	; 0x8a2 <followLine()+0x23e>
     768:	88 31       	cpi	r24, 0x18	; 24
     76a:	91 05       	cpc	r25, r1
     76c:	09 f4       	brne	.+2      	; 0x770 <followLine()+0x10c>
     76e:	8a c0       	rjmp	.+276    	; 0x884 <followLine()+0x220>
     770:	0e 97       	sbiw	r24, 0x0e	; 14
     772:	09 f0       	breq	.+2      	; 0x776 <followLine()+0x112>
     774:	96 cf       	rjmp	.-212    	; 0x6a2 <followLine()+0x3e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:81
    case 0b000111000000 : error = -5;     break;
    case 0b000011100000 : error = -1;     break;
    case 0b000001110000 : error = 1;      break;
    case 0b000000111000 : error = 5;      break;
    case 0b000000011100 : error = 11;     break;
    case 0b000000001110 : error = 17;     break;
     776:	81 e1       	ldi	r24, 0x11	; 17
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	6b c0       	rjmp	.+214    	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:26
  }
}

//void followLine(int modeFollow) {
void followLine() {
  switch (sensorValue) {
     77c:	80 33       	cpi	r24, 0x30	; 48
     77e:	91 05       	cpc	r25, r1
     780:	09 f4       	brne	.+2      	; 0x784 <followLine()+0x120>
     782:	7d c0       	rjmp	.+250    	; 0x87e <followLine()+0x21a>
     784:	34 f4       	brge	.+12     	; 0x792 <followLine()+0x12e>
     786:	80 97       	sbiw	r24, 0x20	; 32
     788:	09 f0       	breq	.+2      	; 0x78c <followLine()+0x128>
     78a:	8b cf       	rjmp	.-234    	; 0x6a2 <followLine()+0x3e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:78
    case 0b111000000000 : error = -25;    break;
    case 0b011100000000 : error = -17;    break;
    case 0b001110000000 : error = -11;    break;
    case 0b000111000000 : error = -5;     break;
    case 0b000011100000 : error = -1;     break;
    case 0b000001110000 : error = 1;      break;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	60 c0       	rjmp	.+192    	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:26
  }
}

//void followLine(int modeFollow) {
void followLine() {
  switch (sensorValue) {
     792:	88 33       	cpi	r24, 0x38	; 56
     794:	91 05       	cpc	r25, r1
     796:	09 f4       	brne	.+2      	; 0x79a <followLine()+0x136>
     798:	84 c0       	rjmp	.+264    	; 0x8a2 <followLine()+0x23e>
     79a:	80 34       	cpi	r24, 0x40	; 64
     79c:	91 05       	cpc	r25, r1
     79e:	09 f0       	breq	.+2      	; 0x7a2 <followLine()+0x13e>
     7a0:	80 cf       	rjmp	.-256    	; 0x6a2 <followLine()+0x3e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:77

    case 0b111000000000 : error = -25;    break;
    case 0b011100000000 : error = -17;    break;
    case 0b001110000000 : error = -11;    break;
    case 0b000111000000 : error = -5;     break;
    case 0b000011100000 : error = -1;     break;
     7a2:	8f ef       	ldi	r24, 0xFF	; 255
     7a4:	9f ef       	ldi	r25, 0xFF	; 255
     7a6:	55 c0       	rjmp	.+170    	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:26
  }
}

//void followLine(int modeFollow) {
void followLine() {
  switch (sensorValue) {
     7a8:	81 15       	cp	r24, r1
     7aa:	22 e0       	ldi	r18, 0x02	; 2
     7ac:	92 07       	cpc	r25, r18
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <followLine()+0x14e>
     7b0:	40 c0       	rjmp	.+128    	; 0x832 <followLine()+0x1ce>
     7b2:	14 f5       	brge	.+68     	; 0x7f8 <followLine()+0x194>
     7b4:	80 3e       	cpi	r24, 0xE0	; 224
     7b6:	91 05       	cpc	r25, r1
     7b8:	a1 f3       	breq	.-24     	; 0x7a2 <followLine()+0x13e>
     7ba:	6c f4       	brge	.+26     	; 0x7d6 <followLine()+0x172>
     7bc:	80 38       	cpi	r24, 0x80	; 128
     7be:	91 05       	cpc	r25, r1
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <followLine()+0x160>
     7c2:	6c c0       	rjmp	.+216    	; 0x89c <followLine()+0x238>
     7c4:	80 3c       	cpi	r24, 0xC0	; 192
     7c6:	91 05       	cpc	r25, r1
     7c8:	09 f4       	brne	.+2      	; 0x7cc <followLine()+0x168>
     7ca:	51 c0       	rjmp	.+162    	; 0x86e <followLine()+0x20a>
     7cc:	80 37       	cpi	r24, 0x70	; 112
     7ce:	91 05       	cpc	r25, r1
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <followLine()+0x170>
     7d2:	67 cf       	rjmp	.-306    	; 0x6a2 <followLine()+0x3e>
     7d4:	db cf       	rjmp	.-74     	; 0x78c <followLine()+0x128>
     7d6:	80 38       	cpi	r24, 0x80	; 128
     7d8:	51 e0       	ldi	r21, 0x01	; 1
     7da:	95 07       	cpc	r25, r21
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <followLine()+0x17c>
     7de:	44 c0       	rjmp	.+136    	; 0x868 <followLine()+0x204>
     7e0:	80 3c       	cpi	r24, 0xC0	; 192
     7e2:	21 e0       	ldi	r18, 0x01	; 1
     7e4:	92 07       	cpc	r25, r18
     7e6:	09 f4       	brne	.+2      	; 0x7ea <followLine()+0x186>
     7e8:	59 c0       	rjmp	.+178    	; 0x89c <followLine()+0x238>
     7ea:	81 15       	cp	r24, r1
     7ec:	91 40       	sbci	r25, 0x01	; 1
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <followLine()+0x18e>
     7f0:	58 cf       	rjmp	.-336    	; 0x6a2 <followLine()+0x3e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:75
    //case 0b000000011111 : error=5;      break;
    //case 0b000000001111 : error=11;     break;

    case 0b111000000000 : error = -25;    break;
    case 0b011100000000 : error = -17;    break;
    case 0b001110000000 : error = -11;    break;
     7f2:	85 ef       	ldi	r24, 0xF5	; 245
     7f4:	9f ef       	ldi	r25, 0xFF	; 255
     7f6:	2d c0       	rjmp	.+90     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:26
  }
}

//void followLine(int modeFollow) {
void followLine() {
  switch (sensorValue) {
     7f8:	81 15       	cp	r24, r1
     7fa:	56 e0       	ldi	r21, 0x06	; 6
     7fc:	95 07       	cpc	r25, r21
     7fe:	89 f1       	breq	.+98     	; 0x862 <followLine()+0x1fe>
     800:	7c f4       	brge	.+30     	; 0x820 <followLine()+0x1bc>
     802:	80 38       	cpi	r24, 0x80	; 128
     804:	43 e0       	ldi	r20, 0x03	; 3
     806:	94 07       	cpc	r25, r20
     808:	a1 f3       	breq	.-24     	; 0x7f2 <followLine()+0x18e>
     80a:	81 15       	cp	r24, r1
     80c:	54 e0       	ldi	r21, 0x04	; 4
     80e:	95 07       	cpc	r25, r21
     810:	d9 f0       	breq	.+54     	; 0x848 <followLine()+0x1e4>
     812:	81 15       	cp	r24, r1
     814:	93 40       	sbci	r25, 0x03	; 3
     816:	09 f0       	breq	.+2      	; 0x81a <followLine()+0x1b6>
     818:	44 cf       	rjmp	.-376    	; 0x6a2 <followLine()+0x3e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:32
    case 0b100000000000 : error = -31;    break;
    case 0b110000000000 : error = -27;    break;
    case 0b010000000000 : error = -25;    break;
    case 0b011000000000 : error = -21;    break;
    case 0b001000000000 : error = -17;    break;
    case 0b001100000000 : error = -15;    break;
     81a:	81 ef       	ldi	r24, 0xF1	; 241
     81c:	9f ef       	ldi	r25, 0xFF	; 255
     81e:	19 c0       	rjmp	.+50     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:26
  }
}

//void followLine(int modeFollow) {
void followLine() {
  switch (sensorValue) {
     820:	81 15       	cp	r24, r1
     822:	48 e0       	ldi	r20, 0x08	; 8
     824:	94 07       	cpc	r25, r20
     826:	99 f0       	breq	.+38     	; 0x84e <followLine()+0x1ea>
     828:	3c f4       	brge	.+14     	; 0x838 <followLine()+0x1d4>
     82a:	81 15       	cp	r24, r1
     82c:	97 40       	sbci	r25, 0x07	; 7
     82e:	09 f0       	breq	.+2      	; 0x832 <followLine()+0x1ce>
     830:	38 cf       	rjmp	.-400    	; 0x6a2 <followLine()+0x3e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:74
    //case 0b000000111111 : error=1;      break;
    //case 0b000000011111 : error=5;      break;
    //case 0b000000001111 : error=11;     break;

    case 0b111000000000 : error = -25;    break;
    case 0b011100000000 : error = -17;    break;
     832:	8f ee       	ldi	r24, 0xEF	; 239
     834:	9f ef       	ldi	r25, 0xFF	; 255
     836:	0d c0       	rjmp	.+26     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:26
  }
}

//void followLine(int modeFollow) {
void followLine() {
  switch (sensorValue) {
     838:	81 15       	cp	r24, r1
     83a:	4c e0       	ldi	r20, 0x0C	; 12
     83c:	94 07       	cpc	r25, r20
     83e:	71 f0       	breq	.+28     	; 0x85c <followLine()+0x1f8>
     840:	81 15       	cp	r24, r1
     842:	9e 40       	sbci	r25, 0x0E	; 14
     844:	09 f0       	breq	.+2      	; 0x848 <followLine()+0x1e4>
     846:	2d cf       	rjmp	.-422    	; 0x6a2 <followLine()+0x3e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:73
    //case 0b000001111111 : error=0;      break;
    //case 0b000000111111 : error=1;      break;
    //case 0b000000011111 : error=5;      break;
    //case 0b000000001111 : error=11;     break;

    case 0b111000000000 : error = -25;    break;
     848:	87 ee       	ldi	r24, 0xE7	; 231
     84a:	9f ef       	ldi	r25, 0xFF	; 255
     84c:	02 c0       	rjmp	.+4      	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:27
}

//void followLine(int modeFollow) {
void followLine() {
  switch (sensorValue) {
    case 0b100000000000 : error = -31;    break;
     84e:	81 ee       	ldi	r24, 0xE1	; 225
     850:	9f ef       	ldi	r25, 0xFF	; 255
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:82
    case 0b000011100000 : error = -1;     break;
    case 0b000001110000 : error = 1;      break;
    case 0b000000111000 : error = 5;      break;
    case 0b000000011100 : error = 11;     break;
    case 0b000000001110 : error = 17;     break;
    case 0b000000000111 : error = 25;     break;
     852:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <error+0x1>
     856:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <error>
     85a:	23 cf       	rjmp	.-442    	; 0x6a2 <followLine()+0x3e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:28

//void followLine(int modeFollow) {
void followLine() {
  switch (sensorValue) {
    case 0b100000000000 : error = -31;    break;
    case 0b110000000000 : error = -27;    break;
     85c:	85 ee       	ldi	r24, 0xE5	; 229
     85e:	9f ef       	ldi	r25, 0xFF	; 255
     860:	f8 cf       	rjmp	.-16     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:30
    case 0b010000000000 : error = -25;    break;
    case 0b011000000000 : error = -21;    break;
     862:	8b ee       	ldi	r24, 0xEB	; 235
     864:	9f ef       	ldi	r25, 0xFF	; 255
     866:	f5 cf       	rjmp	.-22     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:35
    case 0b001000000000 : error = -17;    break;
    case 0b001100000000 : error = -15;    break;
    case 0b000100000000 : error = -11;    break;
    //case 0b011011000000 : error=-7;     break;
    case 0b000110000000 : error = -7;     break;
     868:	89 ef       	ldi	r24, 0xF9	; 249
     86a:	9f ef       	ldi	r25, 0xFF	; 255
     86c:	f2 cf       	rjmp	.-28     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:38
    case 0b000010000000 : error = -5;     break;
    //case 0b001101100000 : error=-3;     break;
    case 0b000011000000 : error = -3;     break;
     86e:	8d ef       	ldi	r24, 0xFD	; 253
     870:	9f ef       	ldi	r25, 0xFF	; 255
     872:	ef cf       	rjmp	.-34     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:41
    //case 0b000110110000 : error=-1;     break;
    case 0b000001000000 : error = -1;     break;
    case 0b000001100000 : error = 0;      break;
     874:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <error+0x1>
     878:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <error>
     87c:	12 cf       	rjmp	.-476    	; 0x6a2 <followLine()+0x3e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:44
    case 0b000000100000 : error = 1;      break;
    //case 0b000011011000 : error=1;      break;
    case 0b000000110000 : error = 3;      break;
     87e:	83 e0       	ldi	r24, 0x03	; 3
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	e7 cf       	rjmp	.-50     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:47
    //case 0b000001101100 : error=3;      break;
    case 0b000000010000 : error = 5;      break;
    case 0b000000011000 : error = 7;      break;
     884:	87 e0       	ldi	r24, 0x07	; 7
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	e4 cf       	rjmp	.-56     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:50
    //case 0b000000110110 : error=7;      break;
    case 0b000000001000 : error = 11;     break;
    case 0b000000001100 : error = 15;     break;
     88a:	8f e0       	ldi	r24, 0x0F	; 15
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	e1 cf       	rjmp	.-62     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:54
    case 0b000000000100 : error = 17;     break;
    case 0b000000000110 : error = 21;     break;
    case 0b000000000010 : error = 25;     break;
    case 0b000000000011 : error = 27;     break;
     890:	8b e1       	ldi	r24, 0x1B	; 27
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	de cf       	rjmp	.-68     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:55
    case 0b000000000001 : error = 31;     break;
     896:	8f e1       	ldi	r24, 0x1F	; 31
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	db cf       	rjmp	.-74     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:76
    //case 0b000000001111 : error=11;     break;

    case 0b111000000000 : error = -25;    break;
    case 0b011100000000 : error = -17;    break;
    case 0b001110000000 : error = -11;    break;
    case 0b000111000000 : error = -5;     break;
     89c:	8b ef       	ldi	r24, 0xFB	; 251
     89e:	9f ef       	ldi	r25, 0xFF	; 255
     8a0:	d8 cf       	rjmp	.-80     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:79
    case 0b000011100000 : error = -1;     break;
    case 0b000001110000 : error = 1;      break;
    case 0b000000111000 : error = 5;      break;
     8a2:	85 e0       	ldi	r24, 0x05	; 5
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	d5 cf       	rjmp	.-86     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:80
    case 0b000000011100 : error = 11;     break;
     8a8:	8b e0       	ldi	r24, 0x0B	; 11
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	d2 cf       	rjmp	.-92     	; 0x852 <followLine()+0x1ee>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:82
    case 0b000000001110 : error = 17;     break;
    case 0b000000000111 : error = 25;     break;
     8ae:	89 e1       	ldi	r24, 0x19	; 25
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	cf cf       	rjmp	.-98     	; 0x852 <followLine()+0x1ee>

000008b4 <turn(int, int, int)>:
_Z4turniii():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:167
  constrain(powerRight, minSpeed, maxSpeed);
  setMotor(powerLeft, powerRight);
  lastError = error;
}

void turn(int motorLeft, int motorRight, int delayTurn) {
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	8c 01       	movw	r16, r24
     8c2:	7b 01       	movw	r14, r22
     8c4:	ea 01       	movw	r28, r20
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:168
  if (delayTurn != 0) {
     8c6:	20 97       	sbiw	r28, 0x00	; 0
     8c8:	01 f1       	breq	.+64     	; 0x90a <turn(int, int, int)+0x56>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:169
    digitalWrite(lcdBackLight, 1);
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	84 e0       	ldi	r24, 0x04	; 4
     8ce:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:170
    if (motorLeft <= 0 || motorRight <= 0) {
     8d2:	10 16       	cp	r1, r16
     8d4:	11 06       	cpc	r1, r17
     8d6:	1c f4       	brge	.+6      	; 0x8de <turn(int, int, int)+0x2a>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:170 (discriminator 1)
     8d8:	1e 14       	cp	r1, r14
     8da:	1f 04       	cpc	r1, r15
     8dc:	64 f0       	brlt	.+24     	; 0x8f6 <turn(int, int, int)+0x42>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:171
      setMotor(-100, -100);
     8de:	6c e9       	ldi	r22, 0x9C	; 156
     8e0:	7f ef       	ldi	r23, 0xFF	; 255
     8e2:	8c e9       	ldi	r24, 0x9C	; 156
     8e4:	9f ef       	ldi	r25, 0xFF	; 255
     8e6:	0e 94 33 01 	call	0x266	; 0x266 <setMotor(int, int)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:172
      delay(20);
     8ea:	64 e1       	ldi	r22, 0x14	; 20
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:174
    }
    setMotor(motorLeft, motorRight);
     8f6:	b7 01       	movw	r22, r14
     8f8:	c8 01       	movw	r24, r16
     8fa:	0e 94 33 01 	call	0x266	; 0x266 <setMotor(int, int)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:175
    delay(delayTurn);
     8fe:	be 01       	movw	r22, r28
     900:	dd 0f       	add	r29, r29
     902:	88 0b       	sbc	r24, r24
     904:	99 0b       	sbc	r25, r25
     906:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:177
  }
  digitalWrite(motorEnable, 1);
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	89 e0       	ldi	r24, 0x09	; 9
     90e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:178
  delay(1);
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:179
  digitalWrite(motorEnable, 0);
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	89 e0       	ldi	r24, 0x09	; 9
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:180
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	ef 90       	pop	r14
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:179
    setMotor(motorLeft, motorRight);
    delay(delayTurn);
  }
  digitalWrite(motorEnable, 1);
  delay(1);
  digitalWrite(motorEnable, 0);
     92e:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <digitalWrite>

00000932 <setup>:
setup():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/source_code_XELERON_X.ino:16
#include "motor.h"
#include "sensor.h"
#include "panel.h"
#include "running.h"

void setup() {
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/source_code_XELERON_X.ino:17
  hardwareInit();
     93a:	0e 94 b3 00 	call	0x166	; 0x166 <hardwareInit()>
     93e:	0d e4       	ldi	r16, 0x4D	; 77
     940:	12 e0       	ldi	r17, 0x02	; 2
     942:	d0 e0       	ldi	r29, 0x00	; 0
     944:	c0 e0       	ldi	r28, 0x00	; 0
_ZNK5EERefdeEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     946:	ce 01       	movw	r24, r28
     948:	0e 94 3e 12 	call	0x247c	; 0x247c <eeprom_read_byte>
_ZN11EEPROMClass3getI10eepromDataEERT_iS3_():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:133
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     94c:	f8 01       	movw	r30, r16
     94e:	81 93       	st	Z+, r24
     950:	8f 01       	movw	r16, r30
     952:	21 96       	adiw	r28, 0x01	; 1
     954:	c0 32       	cpi	r28, 0x20	; 32
     956:	d1 05       	cpc	r29, r1
     958:	b1 f7       	brne	.-20     	; 0x946 <setup+0x14>
setup():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/source_code_XELERON_X.ino:20
  EEPROM.get(0, ee);
  welcomeScreen();
}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/source_code_XELERON_X.ino:19
#include "running.h"

void setup() {
  hardwareInit();
  EEPROM.get(0, ee);
  welcomeScreen();
     962:	0c 94 0c 03 	jmp	0x618	; 0x618 <welcomeScreen()>

00000966 <_GLOBAL__sub_I_kp>:
_GLOBAL__sub_I_kp():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/source_code_XELERON_X.ino:61
  run(150, dimanapun, 150, 150, 100, 100, 50);
   run(150, dimanapun, 150, 150, 100, 100, 50);
  //gripperAction(drop);

  //ending program utama
}
     966:	cf 92       	push	r12
     968:	ef 92       	push	r14
     96a:	0f 93       	push	r16
__static_initialization_and_destruction_0():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/variable.h:16

//barcode
#define jumlahDigitBarcode  13

//char scannedBarcode[jumlahDigitBarcode];
String strScannedBarcode = "";
     96c:	63 e8       	ldi	r22, 0x83	; 131
     96e:	71 e0       	ldi	r23, 0x01	; 1
     970:	89 e7       	ldi	r24, 0x79	; 121
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <String::String(char const*)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/variable.h:18
int codeBarcode;
String strCode1 = "6955549315068";
     978:	67 eb       	ldi	r22, 0xB7	; 183
     97a:	71 e0       	ldi	r23, 0x01	; 1
     97c:	83 e7       	ldi	r24, 0x73	; 115
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <String::String(char const*)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/variable.h:19
String strCode2 = "8998989110129";
     984:	65 ec       	ldi	r22, 0xC5	; 197
     986:	71 e0       	ldi	r23, 0x01	; 1
     988:	8d e6       	ldi	r24, 0x6D	; 109
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <String::String(char const*)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/hardware.h:71
#define lcdD4 5
#define lcdD5 6
#define lcdD6 7
#define lcdD7 3
#define lcdBackLight  4
LiquidCrystal lcd(lcdRS, lcdEN, lcdD4, lcdD5, lcdD6, lcdD7);
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	c8 2e       	mov	r12, r24
     994:	97 e0       	ldi	r25, 0x07	; 7
     996:	e9 2e       	mov	r14, r25
     998:	06 e0       	ldi	r16, 0x06	; 6
     99a:	25 e0       	ldi	r18, 0x05	; 5
     99c:	41 e0       	ldi	r20, 0x01	; 1
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	89 e2       	ldi	r24, 0x29	; 41
     9a2:	92 e0       	ldi	r25, 0x02	; 2
     9a4:	0e 94 de 08 	call	0x11bc	; 0x11bc <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/hardware.h:96
#define motorPWMRight 13
#define motorEnable   9

//servo
#include <Servo.h>
Servo servoGrip;
     9a8:	86 e2       	ldi	r24, 0x26	; 38
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	0e 94 1a 0a 	call	0x1434	; 0x1434 <Servo::Servo()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/hardware.h:97
Servo servoLift;
     9b0:	83 e2       	ldi	r24, 0x23	; 35
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	0e 94 1a 0a 	call	0x1434	; 0x1434 <Servo::Servo()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/hardware.h:107
#define ext1Pin     9       //input obs
#define ext2Pin     15      //relay pelontar

//serial bluetooth
#include <SoftwareSerial.h>
SoftwareSerial mySerial(16, 17);  //Rx, Tx
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	41 e1       	ldi	r20, 0x11	; 17
     9bc:	60 e1       	ldi	r22, 0x10	; 16
     9be:	84 e0       	ldi	r24, 0x04	; 4
     9c0:	92 e0       	ldi	r25, 0x02	; 2
_GLOBAL__sub_I_kp():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/source_code_XELERON_X.ino:61
     9c2:	0f 91       	pop	r16
     9c4:	ef 90       	pop	r14
     9c6:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/hardware.h:107
     9c8:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <SoftwareSerial::SoftwareSerial(signed char, signed char, bool)>

000009cc <_GLOBAL__sub_D_kp>:
_GLOBAL__sub_D_kp():
     9cc:	84 e0       	ldi	r24, 0x04	; 4
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	0e 94 09 0c 	call	0x1812	; 0x1812 <SoftwareSerial::~SoftwareSerial()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/variable.h:19
     9d4:	8d e6       	ldi	r24, 0x6D	; 109
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <String::~String()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/variable.h:18
#define jumlahDigitBarcode  13

//char scannedBarcode[jumlahDigitBarcode];
String strScannedBarcode = "";
int codeBarcode;
String strCode1 = "6955549315068";
     9dc:	83 e7       	ldi	r24, 0x73	; 115
     9de:	92 e0       	ldi	r25, 0x02	; 2
     9e0:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <String::~String()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/variable.h:16

//barcode
#define jumlahDigitBarcode  13

//char scannedBarcode[jumlahDigitBarcode];
String strScannedBarcode = "";
     9e4:	89 e7       	ldi	r24, 0x79	; 121
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <String::~String()>

000009ec <readSensor()>:
_Z10readSensorv():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:7
  digitalWrite(enableSensorNarrow, a);
  digitalWrite(enableSensorWide, b);
  delayMicroseconds(200);
}

void readSensor() {
     9ec:	2f 92       	push	r2
     9ee:	3f 92       	push	r3
     9f0:	4f 92       	push	r4
     9f2:	5f 92       	push	r5
     9f4:	6f 92       	push	r6
     9f6:	7f 92       	push	r7
     9f8:	8f 92       	push	r8
     9fa:	9f 92       	push	r9
     9fc:	af 92       	push	r10
     9fe:	bf 92       	push	r11
     a00:	cf 92       	push	r12
     a02:	df 92       	push	r13
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
     a14:	ab 97       	sbiw	r28, 0x2b	; 43
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	cd bf       	out	0x3d, r28	; 61
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:17
  //  unsigned char indexPosWide[6] = {0, 2, 4, 7, 9, 11};

  //unsigned char xpos[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
  //unsigned char adcPos[16] = {A0, A1, A2, A3, A4, A5, A6, A7, A7, A6, A5, A4, A3, A2, A1, A0};

  unsigned char xpos[14] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};
     a20:	8e e0       	ldi	r24, 0x0E	; 14
     a22:	e3 e2       	ldi	r30, 0x23	; 35
     a24:	f1 e0       	ldi	r31, 0x01	; 1
     a26:	de 01       	movw	r26, r28
     a28:	11 96       	adiw	r26, 0x01	; 1
     a2a:	01 90       	ld	r0, Z+
     a2c:	0d 92       	st	X+, r0
     a2e:	8a 95       	dec	r24
     a30:	e1 f7       	brne	.-8      	; 0xa2a <readSensor()+0x3e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:20
  unsigned char ypos[14] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

  unsigned char adcPosNarrow[8] = {0, 1, 2, 3, 4, 5, 6, 7};
     a32:	88 e0       	ldi	r24, 0x08	; 8
     a34:	e1 e3       	ldi	r30, 0x31	; 49
     a36:	f1 e0       	ldi	r31, 0x01	; 1
     a38:	de 01       	movw	r26, r28
     a3a:	57 96       	adiw	r26, 0x17	; 23
     a3c:	01 90       	ld	r0, Z+
     a3e:	0d 92       	st	X+, r0
     a40:	8a 95       	dec	r24
     a42:	e1 f7       	brne	.-8      	; 0xa3c <readSensor()+0x50>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:21
  unsigned char adcPosWide[6] = {0, 1, 2, 5, 6, 7};
     a44:	86 e0       	ldi	r24, 0x06	; 6
     a46:	e9 e3       	ldi	r30, 0x39	; 57
     a48:	f1 e0       	ldi	r31, 0x01	; 1
     a4a:	de 01       	movw	r26, r28
     a4c:	95 96       	adiw	r26, 0x25	; 37
     a4e:	01 90       	ld	r0, Z+
     a50:	0d 92       	st	X+, r0
     a52:	8a 95       	dec	r24
     a54:	e1 f7       	brne	.-8      	; 0xa4e <readSensor()+0x62>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:22
  unsigned char indexPosNarrow[8] = {1, 3, 5, 6, 7, 8, 10, 12};
     a56:	88 e0       	ldi	r24, 0x08	; 8
     a58:	ef e3       	ldi	r30, 0x3F	; 63
     a5a:	f1 e0       	ldi	r31, 0x01	; 1
     a5c:	de 01       	movw	r26, r28
     a5e:	1f 96       	adiw	r26, 0x0f	; 15
     a60:	01 90       	ld	r0, Z+
     a62:	0d 92       	st	X+, r0
     a64:	8a 95       	dec	r24
     a66:	e1 f7       	brne	.-8      	; 0xa60 <readSensor()+0x74>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:23
  unsigned char indexPosWide[6] = {0, 2, 4, 9, 11, 13};
     a68:	86 e0       	ldi	r24, 0x06	; 6
     a6a:	e7 e4       	ldi	r30, 0x47	; 71
     a6c:	f1 e0       	ldi	r31, 0x01	; 1
     a6e:	de 01       	movw	r26, r28
     a70:	5f 96       	adiw	r26, 0x1f	; 31
     a72:	01 90       	ld	r0, Z+
     a74:	0d 92       	st	X+, r0
     a76:	8a 95       	dec	r24
     a78:	e1 f7       	brne	.-8      	; 0xa72 <readSensor()+0x86>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:28

  unsigned char i;
  int adc, dataSensor = 0;

  setSensor(1, 0);    //narrow
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	0e 94 80 01 	call	0x300	; 0x300 <setSensor(unsigned char, unsigned char)>
     a82:	7e 01       	movw	r14, r28
     a84:	87 e1       	ldi	r24, 0x17	; 23
     a86:	e8 0e       	add	r14, r24
     a88:	f1 1c       	adc	r15, r1
     a8a:	3e 01       	movw	r6, r28
     a8c:	ef e0       	ldi	r30, 0x0F	; 15
     a8e:	6e 0e       	add	r6, r30
     a90:	71 1c       	adc	r7, r1
     a92:	9d e4       	ldi	r25, 0x4D	; 77
     a94:	29 2e       	mov	r2, r25
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	39 2e       	mov	r3, r25
     a9a:	2e 01       	movw	r4, r28
     a9c:	ff e1       	ldi	r31, 0x1F	; 31
     a9e:	4f 0e       	add	r4, r31
     aa0:	51 1c       	adc	r5, r1
     aa2:	61 01       	movw	r12, r2
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:26
  unsigned char adcPosWide[6] = {0, 1, 2, 5, 6, 7};
  unsigned char indexPosNarrow[8] = {1, 3, 5, 6, 7, 8, 10, 12};
  unsigned char indexPosWide[6] = {0, 2, 4, 9, 11, 13};

  unsigned char i;
  int adc, dataSensor = 0;
     aa4:	10 e0       	ldi	r17, 0x00	; 0
     aa6:	00 e0       	ldi	r16, 0x00	; 0
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:33
  setSensor(1, 0);    //narrow
  for (i = 0; i < 8; i++) {
    adc = analogRead(adcPosNarrow[i]);
    lcd.setCursor(xpos[indexPosNarrow[i]], ypos[indexPosNarrow[i]]);
    if (adc > ee.tresholdSensor[i]) {
      dataSensor += (0b10000000000000 >> indexPosNarrow[i]);
     aa8:	a1 2c       	mov	r10, r1
     aaa:	20 e2       	ldi	r18, 0x20	; 32
     aac:	b2 2e       	mov	r11, r18
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:30
  unsigned char i;
  int adc, dataSensor = 0;

  setSensor(1, 0);    //narrow
  for (i = 0; i < 8; i++) {
    adc = analogRead(adcPosNarrow[i]);
     aae:	f7 01       	movw	r30, r14
     ab0:	81 91       	ld	r24, Z+
     ab2:	7f 01       	movw	r14, r30
     ab4:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <analogRead>
     ab8:	4c 01       	movw	r8, r24
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:31
    lcd.setCursor(xpos[indexPosNarrow[i]], ypos[indexPosNarrow[i]]);
     aba:	f3 01       	movw	r30, r6
     abc:	81 91       	ld	r24, Z+
     abe:	3f 01       	movw	r6, r30
     ac0:	8b a7       	std	Y+43, r24	; 0x2b
     ac2:	e1 e0       	ldi	r30, 0x01	; 1
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	ec 0f       	add	r30, r28
     ac8:	fd 1f       	adc	r31, r29
     aca:	e8 0f       	add	r30, r24
     acc:	f1 1d       	adc	r31, r1
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	60 81       	ld	r22, Z
     ad2:	89 e2       	ldi	r24, 0x29	; 41
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	0e 94 29 08 	call	0x1052	; 0x1052 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:32
    if (adc > ee.tresholdSensor[i]) {
     ada:	f6 01       	movw	r30, r12
     adc:	81 91       	ld	r24, Z+
     ade:	91 91       	ld	r25, Z+
     ae0:	6f 01       	movw	r12, r30
     ae2:	88 15       	cp	r24, r8
     ae4:	99 05       	cpc	r25, r9
     ae6:	0c f0       	brlt	.+2      	; 0xaea <readSensor()+0xfe>
     ae8:	7a c0       	rjmp	.+244    	; 0xbde <readSensor()+0x1f2>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:33
      dataSensor += (0b10000000000000 >> indexPosNarrow[i]);
     aea:	c5 01       	movw	r24, r10
     aec:	0b a4       	ldd	r0, Y+43	; 0x2b
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <readSensor()+0x108>
     af0:	95 95       	asr	r25
     af2:	87 95       	ror	r24
     af4:	0a 94       	dec	r0
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <readSensor()+0x104>
     af8:	08 0f       	add	r16, r24
     afa:	19 1f       	adc	r17, r25
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:34
      lcd.write(255);
     afc:	6f ef       	ldi	r22, 0xFF	; 255
     afe:	89 e2       	ldi	r24, 0x29	; 41
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LiquidCrystal::write(unsigned char)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:29 (discriminator 2)

  unsigned char i;
  int adc, dataSensor = 0;

  setSensor(1, 0);    //narrow
  for (i = 0; i < 8; i++) {
     b06:	e4 14       	cp	r14, r4
     b08:	f5 04       	cpc	r15, r5
     b0a:	89 f6       	brne	.-94     	; 0xaae <readSensor()+0xc2>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:38
      dataSensor += (0b10000000000000 >> indexPosNarrow[i]);
      lcd.write(255);
    }
    else lcd.print("_");
  }
  delayMicroseconds(1);
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <delayMicroseconds>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:39
  setSensor(0, 1);  //wide
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	0e 94 80 01 	call	0x300	; 0x300 <setSensor(unsigned char, unsigned char)>
     b1c:	6e 01       	movw	r12, r28
     b1e:	f5 e2       	ldi	r31, 0x25	; 37
     b20:	cf 0e       	add	r12, r31
     b22:	d1 1c       	adc	r13, r1
     b24:	47 01       	movw	r8, r14
     b26:	3e 01       	movw	r6, r28
     b28:	8b e2       	ldi	r24, 0x2B	; 43
     b2a:	68 0e       	add	r6, r24
     b2c:	71 1c       	adc	r7, r1
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:44
  for (i = 0; i < 6; i++) {
    adc = analogRead(adcPosWide[i]);
    lcd.setCursor(xpos[indexPosWide[i]], ypos[indexPosWide[i]]);
    if (adc > ee.tresholdSensor[i]) {
      dataSensor += (0b10000000000000 >> indexPosWide[i]);
     b2e:	e1 2c       	mov	r14, r1
     b30:	80 e2       	ldi	r24, 0x20	; 32
     b32:	f8 2e       	mov	r15, r24
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:41
    else lcd.print("_");
  }
  delayMicroseconds(1);
  setSensor(0, 1);  //wide
  for (i = 0; i < 6; i++) {
    adc = analogRead(adcPosWide[i]);
     b34:	f6 01       	movw	r30, r12
     b36:	81 91       	ld	r24, Z+
     b38:	6f 01       	movw	r12, r30
     b3a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <analogRead>
     b3e:	5c 01       	movw	r10, r24
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:42
    lcd.setCursor(xpos[indexPosWide[i]], ypos[indexPosWide[i]]);
     b40:	f4 01       	movw	r30, r8
     b42:	51 90       	ld	r5, Z+
     b44:	4f 01       	movw	r8, r30
     b46:	e1 e0       	ldi	r30, 0x01	; 1
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	ec 0f       	add	r30, r28
     b4c:	fd 1f       	adc	r31, r29
     b4e:	e5 0d       	add	r30, r5
     b50:	f1 1d       	adc	r31, r1
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	60 81       	ld	r22, Z
     b56:	89 e2       	ldi	r24, 0x29	; 41
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	0e 94 29 08 	call	0x1052	; 0x1052 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:43
    if (adc > ee.tresholdSensor[i]) {
     b5e:	f1 01       	movw	r30, r2
     b60:	81 91       	ld	r24, Z+
     b62:	91 91       	ld	r25, Z+
     b64:	1f 01       	movw	r2, r30
     b66:	8a 15       	cp	r24, r10
     b68:	9b 05       	cpc	r25, r11
     b6a:	0c f0       	brlt	.+2      	; 0xb6e <readSensor()+0x182>
     b6c:	3f c0       	rjmp	.+126    	; 0xbec <readSensor()+0x200>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:44
      dataSensor += (0b10000000000000 >> indexPosWide[i]);
     b6e:	c7 01       	movw	r24, r14
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <readSensor()+0x18a>
     b72:	95 95       	asr	r25
     b74:	87 95       	ror	r24
     b76:	5a 94       	dec	r5
     b78:	e2 f7       	brpl	.-8      	; 0xb72 <readSensor()+0x186>
     b7a:	08 0f       	add	r16, r24
     b7c:	19 1f       	adc	r17, r25
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:45
      lcd.write(255);
     b7e:	6f ef       	ldi	r22, 0xFF	; 255
     b80:	89 e2       	ldi	r24, 0x29	; 41
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LiquidCrystal::write(unsigned char)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:40 (discriminator 2)
    }
    else lcd.print("_");
  }
  delayMicroseconds(1);
  setSensor(0, 1);  //wide
  for (i = 0; i < 6; i++) {
     b88:	c6 14       	cp	r12, r6
     b8a:	d7 04       	cpc	r13, r7
     b8c:	99 f6       	brne	.-90     	; 0xb34 <readSensor()+0x148>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:49
      dataSensor += (0b10000000000000 >> indexPosWide[i]);
      lcd.write(255);
    }
    else lcd.print("_");
  }
  delayMicroseconds(1);
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <delayMicroseconds>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:50
  setSensor(0, 0);
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	0e 94 80 01 	call	0x300	; 0x300 <setSensor(unsigned char, unsigned char)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:57
  sensorValue = dataSensor;

  //white line
  sensorValue = (dataSensor & 0b11111111111111);
  sensorValue = 0b11111111111111 & sensorValue;
  sensorValue = 0b11111111111111 - sensorValue;
     b9e:	00 95       	com	r16
     ba0:	10 95       	com	r17
     ba2:	1f 73       	andi	r17, 0x3F	; 63
     ba4:	10 93 4c 02 	sts	0x024C, r17	; 0x80024c <sensorValue+0x1>
     ba8:	00 93 4b 02 	sts	0x024B, r16	; 0x80024b <sensorValue>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:58
}
     bac:	ab 96       	adiw	r28, 0x2b	; 43
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	df 90       	pop	r13
     bc6:	cf 90       	pop	r12
     bc8:	bf 90       	pop	r11
     bca:	af 90       	pop	r10
     bcc:	9f 90       	pop	r9
     bce:	8f 90       	pop	r8
     bd0:	7f 90       	pop	r7
     bd2:	6f 90       	pop	r6
     bd4:	5f 90       	pop	r5
     bd6:	4f 90       	pop	r4
     bd8:	3f 90       	pop	r3
     bda:	2f 90       	pop	r2
     bdc:	08 95       	ret
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:36
    lcd.setCursor(xpos[indexPosNarrow[i]], ypos[indexPosNarrow[i]]);
    if (adc > ee.tresholdSensor[i]) {
      dataSensor += (0b10000000000000 >> indexPosNarrow[i]);
      lcd.write(255);
    }
    else lcd.print("_");
     bde:	63 ed       	ldi	r22, 0xD3	; 211
     be0:	71 e0       	ldi	r23, 0x01	; 1
     be2:	89 e2       	ldi	r24, 0x29	; 41
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Print::print(char const*)>
     bea:	8d cf       	rjmp	.-230    	; 0xb06 <readSensor()+0x11a>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/sensor.h:47
    lcd.setCursor(xpos[indexPosWide[i]], ypos[indexPosWide[i]]);
    if (adc > ee.tresholdSensor[i]) {
      dataSensor += (0b10000000000000 >> indexPosWide[i]);
      lcd.write(255);
    }
    else lcd.print("_");
     bec:	63 ed       	ldi	r22, 0xD3	; 211
     bee:	71 e0       	ldi	r23, 0x01	; 1
     bf0:	89 e2       	ldi	r24, 0x29	; 41
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Print::print(char const*)>
     bf8:	c7 cf       	rjmp	.-114    	; 0xb88 <readSensor()+0x19c>

00000bfa <homeScreen()>:
_Z10homeScreenv():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/panel.h:14
}

void homeScreen() {

  while (1) {
    digitalWrite(motorEnable, 1);
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	89 e0       	ldi	r24, 0x09	; 9
     bfe:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/panel.h:15
    digitalWrite(lcdBackLight, 1);
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	84 e0       	ldi	r24, 0x04	; 4
     c06:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/panel.h:16
    setMotor(0, 0);
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	0e 94 33 01 	call	0x266	; 0x266 <setMotor(int, int)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/panel.h:17
    readSensor();
     c16:	0e 94 f6 04 	call	0x9ec	; 0x9ec <readSensor()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/panel.h:18
    lcd.setCursor(0, 1);
     c1a:	41 e0       	ldi	r20, 0x01	; 1
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	89 e2       	ldi	r24, 0x29	; 41
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	0e 94 29 08 	call	0x1052	; 0x1052 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/panel.h:19
    lcd.print("Run         Scan");
     c26:	65 ed       	ldi	r22, 0xD5	; 213
     c28:	71 e0       	ldi	r23, 0x01	; 1
     c2a:	89 e2       	ldi	r24, 0x29	; 41
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Print::print(char const*)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/panel.h:20
    if (!digitalRead(buttonBack)) scanSensor();
     c32:	85 e1       	ldi	r24, 0x15	; 21
     c34:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <digitalRead>
     c38:	89 2b       	or	r24, r25
     c3a:	11 f4       	brne	.+4      	; 0xc40 <homeScreen()+0x46>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/panel.h:20 (discriminator 1)
     c3c:	0e 94 8f 01 	call	0x31e	; 0x31e <scanSensor()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/panel.h:21
    if (!digitalRead(buttonOk)) break;
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <digitalRead>
     c46:	89 2b       	or	r24, r25
     c48:	c1 f6       	brne	.-80     	; 0xbfa <homeScreen()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/panel.h:23
  }
  lcd.clear();
     c4a:	89 e2       	ldi	r24, 0x29	; 41
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 22 08 	call	0x1044	; 0x1044 <LiquidCrystal::clear()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/panel.h:24
  delay(300);
     c52:	6c e2       	ldi	r22, 0x2C	; 44
     c54:	71 e0       	ldi	r23, 0x01	; 1
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/panel.h:25
  digitalWrite(motorEnable, 0);
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	89 e0       	ldi	r24, 0x09	; 9
     c62:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/panel.h:26
  delay(200);
     c66:	68 ec       	ldi	r22, 0xC8	; 200
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <delay>

00000c72 <checkObs()>:
_Z8checkObsv():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:189
    gripperAction(pick);
  }
  }*/

void checkObs() {
  if (!digitalRead(ext1Pin)) {
     c72:	89 e0       	ldi	r24, 0x09	; 9
     c74:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <digitalRead>
     c78:	89 2b       	or	r24, r25
     c7a:	09 f0       	breq	.+2      	; 0xc7e <checkObs()+0xc>
     c7c:	58 c0       	rjmp	.+176    	; 0xd2e <checkObs()+0xbc>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:190
    setMotor(-runningSpeed, -runningSpeed);
     c7e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <runningSpeed>
     c82:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <runningSpeed+0x1>
     c86:	91 95       	neg	r25
     c88:	81 95       	neg	r24
     c8a:	91 09       	sbc	r25, r1
     c8c:	bc 01       	movw	r22, r24
     c8e:	0e 94 33 01 	call	0x266	; 0x266 <setMotor(int, int)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:191
    delay(100);
     c92:	64 e6       	ldi	r22, 0x64	; 100
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:192
    setMotor(0, 0);
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	0e 94 33 01 	call	0x266	; 0x266 <setMotor(int, int)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:193
    delay(500);
     caa:	64 ef       	ldi	r22, 0xF4	; 244
     cac:	71 e0       	ldi	r23, 0x01	; 1
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:195

    setMotor(120, -150);
     cb6:	6a e6       	ldi	r22, 0x6A	; 106
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	88 e7       	ldi	r24, 0x78	; 120
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 33 01 	call	0x266	; 0x266 <setMotor(int, int)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:196
    delay(290);
     cc2:	62 e2       	ldi	r22, 0x22	; 34
     cc4:	71 e0       	ldi	r23, 0x01	; 1
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:197
    setMotor(0, 0);
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	0e 94 33 01 	call	0x266	; 0x266 <setMotor(int, int)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:198
    delay(300);
     cda:	6c e2       	ldi	r22, 0x2C	; 44
     cdc:	71 e0       	ldi	r23, 0x01	; 1
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:200

    setMotor(80, 150);
     ce6:	66 e9       	ldi	r22, 0x96	; 150
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	80 e5       	ldi	r24, 0x50	; 80
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 33 01 	call	0x266	; 0x266 <setMotor(int, int)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:201
    delay(1200);
     cf2:	60 eb       	ldi	r22, 0xB0	; 176
     cf4:	74 e0       	ldi	r23, 0x04	; 4
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:204

    do {
      setMotor(80, 150);
     cfe:	66 e9       	ldi	r22, 0x96	; 150
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	80 e5       	ldi	r24, 0x50	; 80
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 33 01 	call	0x266	; 0x266 <setMotor(int, int)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:205
      readSensor();
     d0a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <readSensor()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:207
    }
    while (!(sensorValue & (0b10000000000000 >> 0b00000000000111)));
     d0e:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <sensorValue>
     d12:	86 ff       	sbrs	r24, 6
     d14:	f4 cf       	rjmp	.-24     	; 0xcfe <checkObs()+0x8c>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:209

    setMotor(120, 0);
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	88 e7       	ldi	r24, 0x78	; 120
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 33 01 	call	0x266	; 0x266 <setMotor(int, int)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:210
    delay(150);
     d22:	66 e9       	ldi	r22, 0x96	; 150
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <delay>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:212
  }
}
     d2e:	08 95       	ret

00000d30 <run(int, int, int, int, int, int, int)>:
_Z3runiiiiiii():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:214

void run(int speedAwal, int modeSensor, int motorKiri, int motorKanan, int delayBelok, int speedTimer, int timer) {
     d30:	6f 92       	push	r6
     d32:	7f 92       	push	r7
     d34:	8f 92       	push	r8
     d36:	9f 92       	push	r9
     d38:	af 92       	push	r10
     d3a:	bf 92       	push	r11
     d3c:	cf 92       	push	r12
     d3e:	df 92       	push	r13
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	eb 01       	movw	r28, r22
     d4e:	5a 01       	movw	r10, r20
     d50:	49 01       	movw	r8, r18
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:216
  int tick = 0, tempTick = 0;
  runningSpeed = speedAwal;
     d52:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <runningSpeed+0x1>
     d56:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <runningSpeed>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:258
            goto exitRun;
          }
        }
        break;
      default:
        if (sensorValue & (0b10000000000000 >> (modeSensor - 1))) {
     d5a:	cb 01       	movw	r24, r22
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e2       	ldi	r19, 0x20	; 32
     d62:	39 01       	movw	r6, r18
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <run(int, int, int, int, int, int, int)+0x3a>
     d66:	75 94       	asr	r7
     d68:	67 94       	ror	r6
     d6a:	8a 95       	dec	r24
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <run(int, int, int, int, int, int, int)+0x36>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:218

void run(int speedAwal, int modeSensor, int motorKiri, int motorKanan, int delayBelok, int speedTimer, int timer) {
  int tick = 0, tempTick = 0;
  runningSpeed = speedAwal;
  while (1) {
    readSensor();
     d6e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <readSensor()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:219
    followLine();
     d72:	0e 94 32 03 	call	0x664	; 0x664 <followLine()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:220
    checkObs();
     d76:	0e 94 39 06 	call	0xc72	; 0xc72 <checkObs()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:221
    switch (modeSensor) {
     d7a:	cf 30       	cpi	r28, 0x0F	; 15
     d7c:	d1 05       	cpc	r29, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <run(int, int, int, int, int, int, int)+0x52>
     d80:	4f c0       	rjmp	.+158    	; 0xe20 <run(int, int, int, int, int, int, int)+0xf0>
     d82:	64 f4       	brge	.+24     	; 0xd9c <run(int, int, int, int, int, int, int)+0x6c>
     d84:	20 97       	sbiw	r28, 0x00	; 0
     d86:	11 f1       	breq	.+68     	; 0xdcc <run(int, int, int, int, int, int, int)+0x9c>
     d88:	c1 30       	cpi	r28, 0x01	; 1
     d8a:	d1 05       	cpc	r29, r1
     d8c:	29 f1       	breq	.+74     	; 0xdd8 <run(int, int, int, int, int, int, int)+0xa8>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:258
            goto exitRun;
          }
        }
        break;
      default:
        if (sensorValue & (0b10000000000000 >> (modeSensor - 1))) {
     d8e:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <sensorValue>
     d92:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <sensorValue+0x1>
     d96:	86 21       	and	r24, r6
     d98:	97 21       	and	r25, r7
     d9a:	5a c0       	rjmp	.+180    	; 0xe50 <run(int, int, int, int, int, int, int)+0x120>
     d9c:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <sensorValue>
     da0:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <sensorValue+0x1>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:221
  runningSpeed = speedAwal;
  while (1) {
    readSensor();
    followLine();
    checkObs();
    switch (modeSensor) {
     da4:	c0 31       	cpi	r28, 0x10	; 16
     da6:	d1 05       	cpc	r29, r1
     da8:	09 f4       	brne	.+2      	; 0xdac <run(int, int, int, int, int, int, int)+0x7c>
     daa:	43 c0       	rjmp	.+134    	; 0xe32 <run(int, int, int, int, int, int, int)+0x102>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:250
          }
        }
        break;
      case lr:
      case rl:
        if (sensorValue & sensorKanan) {
     dac:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <sensorKanan>
     db0:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <sensorKanan+0x1>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:221
  runningSpeed = speedAwal;
  while (1) {
    readSensor();
    followLine();
    checkObs();
    switch (modeSensor) {
     db4:	c3 31       	cpi	r28, 0x13	; 19
     db6:	d1 05       	cpc	r29, r1
     db8:	54 f7       	brge	.-44     	; 0xd8e <run(int, int, int, int, int, int, int)+0x5e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:250
          }
        }
        break;
      case lr:
      case rl:
        if (sensorValue & sensorKanan) {
     dba:	28 23       	and	r18, r24
     dbc:	39 23       	and	r19, r25
     dbe:	23 2b       	or	r18, r19
     dc0:	b1 f2       	breq	.-84     	; 0xd6e <run(int, int, int, int, int, int, int)+0x3e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:251
          if (sensorValue & sensorKiri) {
     dc2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <sensorKiri>
     dc6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <sensorKiri+0x1>
     dca:	40 c0       	rjmp	.+128    	; 0xe4c <run(int, int, int, int, int, int, int)+0x11c>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:223
    readSensor();
    followLine();
    checkObs();
    switch (modeSensor) {
      case tanpaGaris:
        if (sensorValue == sensorTanpaGaris) {
     dcc:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <sensorValue>
     dd0:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <sensorValue+0x1>
     dd4:	89 2b       	or	r24, r25
     dd6:	59 f6       	brne	.-106    	; 0xd6e <run(int, int, int, int, int, int, int)+0x3e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:229
          turn(motorKiri, motorKanan, delayBelok);
          goto exitRun;
        }
        break;
      case dimanapun:
        turn(motorKiri, motorKanan, delayBelok);
     dd8:	a8 01       	movw	r20, r16
     dda:	b4 01       	movw	r22, r8
     ddc:	c5 01       	movw	r24, r10
     dde:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <turn(int, int, int)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:266
        }
        break;
    }
  }
exitRun:
  runningSpeed = 0;
     de2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <runningSpeed+0x1>
     de6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <runningSpeed>
     dea:	ce e1       	ldi	r28, 0x1E	; 30
     dec:	d0 e0       	ldi	r29, 0x00	; 0
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:268
  while (tempTick < 30) {
    readSensor();
     dee:	0e 94 f6 04 	call	0x9ec	; 0x9ec <readSensor()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:269
    followLine();
     df2:	0e 94 32 03 	call	0x664	; 0x664 <followLine()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:270
    checkObs();
     df6:	0e 94 39 06 	call	0xc72	; 0xc72 <checkObs()>
     dfa:	21 97       	sbiw	r28, 0x01	; 1
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:267
        break;
    }
  }
exitRun:
  runningSpeed = 0;
  while (tempTick < 30) {
     dfc:	c1 f7       	brne	.-16     	; 0xdee <run(int, int, int, int, int, int, int)+0xbe>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:273
    readSensor();
    followLine();
    checkObs();
    tempTick++;
  }
  runningSpeed = speedTimer;
     dfe:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <runningSpeed+0x1>
     e02:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <runningSpeed>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:215
    delay(150);
  }
}

void run(int speedAwal, int modeSensor, int motorKiri, int motorKanan, int delayBelok, int speedTimer, int timer) {
  int tick = 0, tempTick = 0;
     e06:	d0 e0       	ldi	r29, 0x00	; 0
     e08:	c0 e0       	ldi	r28, 0x00	; 0
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:274
    followLine();
    checkObs();
    tempTick++;
  }
  runningSpeed = speedTimer;
  while (tick < timer) {
     e0a:	cc 15       	cp	r28, r12
     e0c:	dd 05       	cpc	r29, r13
     e0e:	24 f5       	brge	.+72     	; 0xe58 <run(int, int, int, int, int, int, int)+0x128>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:275
    readSensor();
     e10:	0e 94 f6 04 	call	0x9ec	; 0x9ec <readSensor()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:276
    followLine();
     e14:	0e 94 32 03 	call	0x664	; 0x664 <followLine()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:277
    checkObs();
     e18:	0e 94 39 06 	call	0xc72	; 0xc72 <checkObs()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:278
    tick++;
     e1c:	21 96       	adiw	r28, 0x01	; 1
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:274
    followLine();
    checkObs();
    tempTick++;
  }
  runningSpeed = speedTimer;
  while (tick < timer) {
     e1e:	f5 cf       	rjmp	.-22     	; 0xe0a <run(int, int, int, int, int, int, int)+0xda>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:233
      case dimanapun:
        turn(motorKiri, motorKanan, delayBelok);
        goto exitRun;
        break;
      case fl:
        if (sensorValue & sensorTengah) {
     e20:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <sensorValue>
     e24:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <sensorValue+0x1>
     e28:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <sensorTengah>
     e2c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <sensorTengah+0x1>
     e30:	c4 cf       	rjmp	.-120    	; 0xdba <run(int, int, int, int, int, int, int)+0x8a>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:241
            goto exitRun;
          }
        }
        break;
      case fr:
        if (sensorValue & sensorTengah) {
     e32:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <sensorTengah>
     e36:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <sensorTengah+0x1>
     e3a:	28 23       	and	r18, r24
     e3c:	39 23       	and	r19, r25
     e3e:	23 2b       	or	r18, r19
     e40:	09 f4       	brne	.+2      	; 0xe44 <run(int, int, int, int, int, int, int)+0x114>
     e42:	95 cf       	rjmp	.-214    	; 0xd6e <run(int, int, int, int, int, int, int)+0x3e>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:242
          if (sensorValue & sensorKanan) {
     e44:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <sensorKanan>
     e48:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <sensorKanan+0x1>
     e4c:	82 23       	and	r24, r18
     e4e:	93 23       	and	r25, r19
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:258
            goto exitRun;
          }
        }
        break;
      default:
        if (sensorValue & (0b10000000000000 >> (modeSensor - 1))) {
     e50:	89 2b       	or	r24, r25
     e52:	09 f4       	brne	.+2      	; 0xe56 <run(int, int, int, int, int, int, int)+0x126>
     e54:	8c cf       	rjmp	.-232    	; 0xd6e <run(int, int, int, int, int, int, int)+0x3e>
     e56:	c0 cf       	rjmp	.-128    	; 0xdd8 <run(int, int, int, int, int, int, int)+0xa8>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:280
    readSensor();
    followLine();
    checkObs();
    tick++;
  }
  digitalWrite(lcdBackLight, 0);
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	84 e0       	ldi	r24, 0x04	; 4
     e5c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:281
  digitalWrite(motorEnable, 1);
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	89 e0       	ldi	r24, 0x09	; 9
     e64:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:282
  delay(1);
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <delay>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:283
  digitalWrite(motorEnable, 0);
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	89 e0       	ldi	r24, 0x09	; 9
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:284
}
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	bf 90       	pop	r11
     e8a:	af 90       	pop	r10
     e8c:	9f 90       	pop	r9
     e8e:	8f 90       	pop	r8
     e90:	7f 90       	pop	r7
     e92:	6f 90       	pop	r6
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/running.h:283
    tick++;
  }
  digitalWrite(lcdBackLight, 0);
  digitalWrite(motorEnable, 1);
  delay(1);
  digitalWrite(motorEnable, 0);
     e94:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <digitalWrite>

00000e98 <mainProgram()>:
_Z11mainProgramv():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/source_code_XELERON_X.ino:31

  stopMotor();
}

//isi program
void mainProgram() {
     e98:	cf 92       	push	r12
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/source_code_XELERON_X.ino:56

  //lontar()    untuk melontar bola


  //masukkan program utama disini====================================================================
  run(150, dimanapun, 150, 150, 100, 100, 50);
     ea4:	82 e3       	ldi	r24, 0x32	; 50
     ea6:	c8 2e       	mov	r12, r24
     ea8:	d1 2c       	mov	r13, r1
     eaa:	94 e6       	ldi	r25, 0x64	; 100
     eac:	e9 2e       	mov	r14, r25
     eae:	f1 2c       	mov	r15, r1
     eb0:	04 e6       	ldi	r16, 0x64	; 100
     eb2:	10 e0       	ldi	r17, 0x00	; 0
     eb4:	26 e9       	ldi	r18, 0x96	; 150
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	46 e9       	ldi	r20, 0x96	; 150
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	86 e9       	ldi	r24, 0x96	; 150
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 98 06 	call	0xd30	; 0xd30 <run(int, int, int, int, int, int, int)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/source_code_XELERON_X.ino:57
   run(150, dimanapun, 150, 150, 100, 100, 50);
     ec8:	26 e9       	ldi	r18, 0x96	; 150
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	46 e9       	ldi	r20, 0x96	; 150
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	86 e9       	ldi	r24, 0x96	; 150
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 98 06 	call	0xd30	; 0xd30 <run(int, int, int, int, int, int, int)>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/source_code_XELERON_X.ino:61
  //gripperAction(drop);

  //ending program utama
}
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	df 90       	pop	r13
     ee6:	cf 90       	pop	r12
     ee8:	08 95       	ret

00000eea <loop>:
loop():
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/source_code_XELERON_X.ino:23
  EEPROM.get(0, ee);
  welcomeScreen();
}

void loop() {
  homeScreen();
     eea:	0e 94 fd 05 	call	0xbfa	; 0xbfa <homeScreen()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/source_code_XELERON_X.ino:25

  mainProgram();      //untuk menjalankan seluruh isi program utama
     eee:	0e 94 4c 07 	call	0xe98	; 0xe98 <mainProgram()>
G:\Shared drives\XELERON Development\MRC 2022 - Pak Haris\MI - backup\source_code_XELERON_X/source_code_XELERON_X.ino:27

  stopMotor();
     ef2:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <stopMotor()>

00000ef6 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:271
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	08 95       	ret

00000efc <Print::flush()>:
_ZN5Print5flushEv():
     efc:	08 95       	ret

00000efe <LiquidCrystal::pulseEnable()>:
_ZN13LiquidCrystal11pulseEnableEv():
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	ec 01       	movw	r28, r24
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	8e 81       	ldd	r24, Y+6	; 0x06
     f08:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <delayMicroseconds>
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	8e 81       	ldd	r24, Y+6	; 0x06
     f18:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <delayMicroseconds>
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	8e 81       	ldd	r24, Y+6	; 0x06
     f28:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
     f2c:	84 e6       	ldi	r24, 0x64	; 100
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <delayMicroseconds>

00000f38 <LiquidCrystal::write4bits(unsigned char)>:
_ZN13LiquidCrystal10write4bitsEh():
     f38:	cf 92       	push	r12
     f3a:	df 92       	push	r13
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	6c 01       	movw	r12, r24
     f4a:	7c 01       	movw	r14, r24
     f4c:	87 e0       	ldi	r24, 0x07	; 7
     f4e:	e8 0e       	add	r14, r24
     f50:	f1 1c       	adc	r15, r1
     f52:	d0 e0       	ldi	r29, 0x00	; 0
     f54:	c0 e0       	ldi	r28, 0x00	; 0
     f56:	06 2f       	mov	r16, r22
     f58:	10 e0       	ldi	r17, 0x00	; 0
     f5a:	b8 01       	movw	r22, r16
     f5c:	0c 2e       	mov	r0, r28
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <LiquidCrystal::write4bits(unsigned char)+0x2c>
     f60:	75 95       	asr	r23
     f62:	67 95       	ror	r22
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <LiquidCrystal::write4bits(unsigned char)+0x28>
     f68:	61 70       	andi	r22, 0x01	; 1
     f6a:	f7 01       	movw	r30, r14
     f6c:	81 91       	ld	r24, Z+
     f6e:	7f 01       	movw	r14, r30
     f70:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
     f74:	21 96       	adiw	r28, 0x01	; 1
     f76:	c4 30       	cpi	r28, 0x04	; 4
     f78:	d1 05       	cpc	r29, r1
     f7a:	79 f7       	brne	.-34     	; 0xf5a <LiquidCrystal::write4bits(unsigned char)+0x22>
     f7c:	c6 01       	movw	r24, r12
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	df 90       	pop	r13
     f8c:	cf 90       	pop	r12
     f8e:	0c 94 7f 07 	jmp	0xefe	; 0xefe <LiquidCrystal::pulseEnable()>

00000f92 <LiquidCrystal::write8bits(unsigned char)>:
_ZN13LiquidCrystal10write8bitsEh():
     f92:	cf 92       	push	r12
     f94:	df 92       	push	r13
     f96:	ef 92       	push	r14
     f98:	ff 92       	push	r15
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	6c 01       	movw	r12, r24
     fa4:	7c 01       	movw	r14, r24
     fa6:	87 e0       	ldi	r24, 0x07	; 7
     fa8:	e8 0e       	add	r14, r24
     faa:	f1 1c       	adc	r15, r1
     fac:	d0 e0       	ldi	r29, 0x00	; 0
     fae:	c0 e0       	ldi	r28, 0x00	; 0
     fb0:	06 2f       	mov	r16, r22
     fb2:	10 e0       	ldi	r17, 0x00	; 0
     fb4:	b8 01       	movw	r22, r16
     fb6:	0c 2e       	mov	r0, r28
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <LiquidCrystal::write8bits(unsigned char)+0x2c>
     fba:	75 95       	asr	r23
     fbc:	67 95       	ror	r22
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <LiquidCrystal::write8bits(unsigned char)+0x28>
     fc2:	61 70       	andi	r22, 0x01	; 1
     fc4:	f7 01       	movw	r30, r14
     fc6:	81 91       	ld	r24, Z+
     fc8:	7f 01       	movw	r14, r30
     fca:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
     fce:	21 96       	adiw	r28, 0x01	; 1
     fd0:	c8 30       	cpi	r28, 0x08	; 8
     fd2:	d1 05       	cpc	r29, r1
     fd4:	79 f7       	brne	.-34     	; 0xfb4 <LiquidCrystal::write8bits(unsigned char)+0x22>
     fd6:	c6 01       	movw	r24, r12
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	ff 90       	pop	r15
     fe2:	ef 90       	pop	r14
     fe4:	df 90       	pop	r13
     fe6:	cf 90       	pop	r12
     fe8:	0c 94 7f 07 	jmp	0xefe	; 0xefe <LiquidCrystal::pulseEnable()>

00000fec <LiquidCrystal::send(unsigned char, unsigned char)>:
_ZN13LiquidCrystal4sendEhh():
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	ec 01       	movw	r28, r24
     ff4:	16 2f       	mov	r17, r22
     ff6:	64 2f       	mov	r22, r20
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	8f 3f       	cpi	r24, 0xFF	; 255
    1002:	19 f0       	breq	.+6      	; 0x100a <LiquidCrystal::send(unsigned char, unsigned char)+0x1e>
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
    100a:	8f 85       	ldd	r24, Y+15	; 0x0f
    100c:	61 2f       	mov	r22, r17
    100e:	84 ff       	sbrs	r24, 4
    1010:	06 c0       	rjmp	.+12     	; 0x101e <LiquidCrystal::send(unsigned char, unsigned char)+0x32>
    1012:	ce 01       	movw	r24, r28
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <LiquidCrystal::write8bits(unsigned char)>
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	84 e0       	ldi	r24, 0x04	; 4
    1022:	75 95       	asr	r23
    1024:	67 95       	ror	r22
    1026:	8a 95       	dec	r24
    1028:	e1 f7       	brne	.-8      	; 0x1022 <LiquidCrystal::send(unsigned char, unsigned char)+0x36>
    102a:	ce 01       	movw	r24, r28
    102c:	0e 94 9c 07 	call	0xf38	; 0xf38 <LiquidCrystal::write4bits(unsigned char)>
    1030:	61 2f       	mov	r22, r17
    1032:	ce 01       	movw	r24, r28
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <LiquidCrystal::write4bits(unsigned char)>

0000103e <LiquidCrystal::command(unsigned char)>:
_ZN13LiquidCrystal7commandEh():
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	0c 94 f6 07 	jmp	0xfec	; 0xfec <LiquidCrystal::send(unsigned char, unsigned char)>

00001044 <LiquidCrystal::clear()>:
_ZN13LiquidCrystal5clearEv():
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	0e 94 1f 08 	call	0x103e	; 0x103e <LiquidCrystal::command(unsigned char)>
    104a:	80 ed       	ldi	r24, 0xD0	; 208
    104c:	97 e0       	ldi	r25, 0x07	; 7
    104e:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <delayMicroseconds>

00001052 <LiquidCrystal::setCursor(unsigned char, unsigned char)>:
_ZN13LiquidCrystal9setCursorEhh():
    1052:	44 30       	cpi	r20, 0x04	; 4
    1054:	08 f0       	brcs	.+2      	; 0x1058 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x6>
    1056:	43 e0       	ldi	r20, 0x03	; 3
    1058:	fc 01       	movw	r30, r24
    105a:	23 89       	ldd	r18, Z+19	; 0x13
    105c:	42 17       	cp	r20, r18
    105e:	10 f0       	brcs	.+4      	; 0x1064 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x12>
    1060:	4f ef       	ldi	r20, 0xFF	; 255
    1062:	42 0f       	add	r20, r18
    1064:	fc 01       	movw	r30, r24
    1066:	e4 0f       	add	r30, r20
    1068:	f1 1d       	adc	r31, r1
    106a:	24 89       	ldd	r18, Z+20	; 0x14
    106c:	62 0f       	add	r22, r18
    106e:	60 68       	ori	r22, 0x80	; 128
    1070:	0c 94 1f 08 	jmp	0x103e	; 0x103e <LiquidCrystal::command(unsigned char)>

00001074 <LiquidCrystal::display()>:
_ZN13LiquidCrystal7displayEv():
    1074:	fc 01       	movw	r30, r24
    1076:	60 89       	ldd	r22, Z+16	; 0x10
    1078:	26 2f       	mov	r18, r22
    107a:	24 60       	ori	r18, 0x04	; 4
    107c:	20 8b       	std	Z+16, r18	; 0x10
    107e:	6c 60       	ori	r22, 0x0C	; 12
    1080:	0c 94 1f 08 	jmp	0x103e	; 0x103e <LiquidCrystal::command(unsigned char)>

00001084 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystal5beginEhhh():
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	ec 01       	movw	r28, r24
    108e:	42 30       	cpi	r20, 0x02	; 2
    1090:	18 f0       	brcs	.+6      	; 0x1098 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x14>
    1092:	8f 85       	ldd	r24, Y+15	; 0x0f
    1094:	88 60       	ori	r24, 0x08	; 8
    1096:	8f 87       	std	Y+15, r24	; 0x0f
    1098:	4b 8b       	std	Y+19, r20	; 0x13
_ZN13LiquidCrystal13setRowOffsetsEiiii():
    109a:	1c 8a       	std	Y+20, r1	; 0x14
    109c:	80 e4       	ldi	r24, 0x40	; 64
    109e:	8d 8b       	std	Y+21, r24	; 0x15
    10a0:	6e 8b       	std	Y+22, r22	; 0x16
    10a2:	60 5c       	subi	r22, 0xC0	; 192
    10a4:	6f 8b       	std	Y+23, r22	; 0x17
_ZN13LiquidCrystal5beginEhhh():
    10a6:	22 23       	and	r18, r18
    10a8:	29 f0       	breq	.+10     	; 0x10b4 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    10aa:	41 30       	cpi	r20, 0x01	; 1
    10ac:	19 f4       	brne	.+6      	; 0x10b4 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    10ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8f 87       	std	Y+15, r24	; 0x0f
    10b4:	61 e0       	ldi	r22, 0x01	; 1
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	8f 3f       	cpi	r24, 0xFF	; 255
    10c0:	19 f0       	breq	.+6      	; 0x10c8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x44>
    10c2:	61 e0       	ldi	r22, 0x01	; 1
    10c4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	8e 81       	ldd	r24, Y+6	; 0x06
    10cc:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
    10d0:	8e 01       	movw	r16, r28
    10d2:	98 01       	movw	r18, r16
    10d4:	2c 1b       	sub	r18, r28
    10d6:	3d 0b       	sbc	r19, r29
    10d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10da:	84 fd       	sbrc	r24, 4
    10dc:	0d c0       	rjmp	.+26     	; 0x10f8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x74>
    10de:	84 e0       	ldi	r24, 0x04	; 4
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0f 5f       	subi	r16, 0xFF	; 255
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	28 17       	cp	r18, r24
    10e8:	39 07       	cpc	r19, r25
    10ea:	4c f4       	brge	.+18     	; 0x10fe <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x7a>
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	f8 01       	movw	r30, r16
    10f0:	86 81       	ldd	r24, Z+6	; 0x06
    10f2:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
    10f6:	ed cf       	rjmp	.-38     	; 0x10d2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x4e>
    10f8:	88 e0       	ldi	r24, 0x08	; 8
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	f2 cf       	rjmp	.-28     	; 0x10e2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x5e>
    10fe:	80 e5       	ldi	r24, 0x50	; 80
    1100:	93 ec       	ldi	r25, 0xC3	; 195
    1102:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <delayMicroseconds>
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	8e 81       	ldd	r24, Y+6	; 0x06
    1112:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	8f 3f       	cpi	r24, 0xFF	; 255
    111a:	19 f0       	breq	.+6      	; 0x1122 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x9e>
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
    1122:	6f 85       	ldd	r22, Y+15	; 0x0f
    1124:	64 fd       	sbrc	r22, 4
    1126:	33 c0       	rjmp	.+102    	; 0x118e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x10a>
    1128:	63 e0       	ldi	r22, 0x03	; 3
    112a:	ce 01       	movw	r24, r28
    112c:	0e 94 9c 07 	call	0xf38	; 0xf38 <LiquidCrystal::write4bits(unsigned char)>
    1130:	84 e9       	ldi	r24, 0x94	; 148
    1132:	91 e1       	ldi	r25, 0x11	; 17
    1134:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <delayMicroseconds>
    1138:	63 e0       	ldi	r22, 0x03	; 3
    113a:	ce 01       	movw	r24, r28
    113c:	0e 94 9c 07 	call	0xf38	; 0xf38 <LiquidCrystal::write4bits(unsigned char)>
    1140:	84 e9       	ldi	r24, 0x94	; 148
    1142:	91 e1       	ldi	r25, 0x11	; 17
    1144:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <delayMicroseconds>
    1148:	63 e0       	ldi	r22, 0x03	; 3
    114a:	ce 01       	movw	r24, r28
    114c:	0e 94 9c 07 	call	0xf38	; 0xf38 <LiquidCrystal::write4bits(unsigned char)>
    1150:	86 e9       	ldi	r24, 0x96	; 150
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <delayMicroseconds>
    1158:	62 e0       	ldi	r22, 0x02	; 2
    115a:	ce 01       	movw	r24, r28
    115c:	0e 94 9c 07 	call	0xf38	; 0xf38 <LiquidCrystal::write4bits(unsigned char)>
    1160:	6f 85       	ldd	r22, Y+15	; 0x0f
    1162:	60 62       	ori	r22, 0x20	; 32
    1164:	ce 01       	movw	r24, r28
    1166:	0e 94 1f 08 	call	0x103e	; 0x103e <LiquidCrystal::command(unsigned char)>
    116a:	84 e0       	ldi	r24, 0x04	; 4
    116c:	88 8b       	std	Y+16, r24	; 0x10
    116e:	ce 01       	movw	r24, r28
    1170:	0e 94 3a 08 	call	0x1074	; 0x1074 <LiquidCrystal::display()>
    1174:	ce 01       	movw	r24, r28
    1176:	0e 94 22 08 	call	0x1044	; 0x1044 <LiquidCrystal::clear()>
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	89 8b       	std	Y+17, r24	; 0x11
    117e:	66 e0       	ldi	r22, 0x06	; 6
    1180:	ce 01       	movw	r24, r28
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	0c 94 1f 08 	jmp	0x103e	; 0x103e <LiquidCrystal::command(unsigned char)>
    118e:	60 62       	ori	r22, 0x20	; 32
    1190:	ce 01       	movw	r24, r28
    1192:	0e 94 1f 08 	call	0x103e	; 0x103e <LiquidCrystal::command(unsigned char)>
    1196:	84 e9       	ldi	r24, 0x94	; 148
    1198:	91 e1       	ldi	r25, 0x11	; 17
    119a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <delayMicroseconds>
    119e:	6f 85       	ldd	r22, Y+15	; 0x0f
    11a0:	60 62       	ori	r22, 0x20	; 32
    11a2:	ce 01       	movw	r24, r28
    11a4:	0e 94 1f 08 	call	0x103e	; 0x103e <LiquidCrystal::command(unsigned char)>
    11a8:	86 e9       	ldi	r24, 0x96	; 150
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <delayMicroseconds>
    11b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    11b2:	60 62       	ori	r22, 0x20	; 32
    11b4:	ce 01       	movw	r24, r28
    11b6:	0e 94 1f 08 	call	0x103e	; 0x103e <LiquidCrystal::command(unsigned char)>
    11ba:	d2 cf       	rjmp	.-92     	; 0x1160 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xdc>

000011bc <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystalC2Ehhhhhh():
    11bc:	cf 92       	push	r12
    11be:	ef 92       	push	r14
    11c0:	0f 93       	push	r16
    11c2:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    11c4:	13 82       	std	Z+3, r1	; 0x03
    11c6:	12 82       	std	Z+2, r1	; 0x02
_ZN13LiquidCrystalC2Ehhhhhh():
    11c8:	8a ee       	ldi	r24, 0xEA	; 234
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	80 83       	st	Z, r24
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    11d0:	64 83       	std	Z+4, r22	; 0x04
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	85 83       	std	Z+5, r24	; 0x05
    11d6:	46 83       	std	Z+6, r20	; 0x06
    11d8:	27 83       	std	Z+7, r18	; 0x07
    11da:	00 87       	std	Z+8, r16	; 0x08
    11dc:	e1 86       	std	Z+9, r14	; 0x09
    11de:	c2 86       	std	Z+10, r12	; 0x0a
    11e0:	13 86       	std	Z+11, r1	; 0x0b
    11e2:	14 86       	std	Z+12, r1	; 0x0c
    11e4:	15 86       	std	Z+13, r1	; 0x0d
    11e6:	16 86       	std	Z+14, r1	; 0x0e
    11e8:	17 86       	std	Z+15, r1	; 0x0f
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	41 e0       	ldi	r20, 0x01	; 1
    11ee:	60 e1       	ldi	r22, 0x10	; 16
    11f0:	cf 01       	movw	r24, r30
_ZN13LiquidCrystalC2Ehhhhhh():
    11f2:	0f 91       	pop	r16
    11f4:	ef 90       	pop	r14
    11f6:	cf 90       	pop	r12
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    11f8:	0c 94 42 08 	jmp	0x1084	; 0x1084 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>

000011fc <LiquidCrystal::write(unsigned char)>:
_ZN13LiquidCrystal5writeEh():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    11fc:	41 e0       	ldi	r20, 0x01	; 1
    11fe:	0e 94 f6 07 	call	0xfec	; 0xfec <LiquidCrystal::send(unsigned char, unsigned char)>
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	08 95       	ret

00001208 <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)>:
_ZL17handle_interrupts18timer16_Sequence_tPVjS1_():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:53
#define SERVO_MAX() (MAX_PULSE_WIDTH - this->max * 4)  // maximum value in uS for this servo

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
    1208:	cf 92       	push	r12
    120a:	df 92       	push	r13
    120c:	ef 92       	push	r14
    120e:	ff 92       	push	r15
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	6b 01       	movw	r12, r22
    121a:	7a 01       	movw	r14, r20
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:54
  if( Channel[timer] < 0 )
    121c:	ec 01       	movw	r28, r24
    121e:	c0 58       	subi	r28, 0x80	; 128
    1220:	dd 4f       	sbci	r29, 0xFD	; 253
    1222:	28 81       	ld	r18, Y
    1224:	3c e0       	ldi	r19, 0x0C	; 12
    1226:	38 9f       	mul	r19, r24
    1228:	80 01       	movw	r16, r0
    122a:	39 9f       	mul	r19, r25
    122c:	10 0d       	add	r17, r0
    122e:	11 24       	eor	r1, r1
    1230:	27 ff       	sbrs	r18, 7
    1232:	24 c0       	rjmp	.+72     	; 0x127c <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)+0x74>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:55
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
    1234:	fb 01       	movw	r30, r22
    1236:	11 82       	std	Z+1, r1	; 0x01
    1238:	10 82       	st	Z, r1
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:61
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
    123a:	88 81       	ld	r24, Y
    123c:	8f 5f       	subi	r24, 0xFF	; 255
    123e:	88 83       	st	Y, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:62
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    1240:	88 81       	ld	r24, Y
    1242:	98 01       	movw	r18, r16
    1244:	28 0f       	add	r18, r24
    1246:	31 1d       	adc	r19, r1
    1248:	87 fd       	sbrc	r24, 7
    124a:	3a 95       	dec	r19
    124c:	c9 01       	movw	r24, r18
    124e:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <ServoCount>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:63
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    1252:	f6 01       	movw	r30, r12
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:62
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    1254:	28 17       	cp	r18, r24
    1256:	19 06       	cpc	r1, r25
    1258:	29 f0       	breq	.+10     	; 0x1264 <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)+0x5c>
    125a:	24 f0       	brlt	.+8      	; 0x1264 <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)+0x5c>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:62 (discriminator 1)
    125c:	88 81       	ld	r24, Y
    125e:	8c 30       	cpi	r24, 0x0C	; 12
    1260:	0c f4       	brge	.+2      	; 0x1264 <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)+0x5c>
    1262:	3c c0       	rjmp	.+120    	; 0x12dc <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)+0xd4>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:69
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
    1264:	80 81       	ld	r24, Z
    1266:	91 81       	ldd	r25, Z+1	; 0x01
    1268:	04 96       	adiw	r24, 0x04	; 4
    126a:	80 35       	cpi	r24, 0x50	; 80
    126c:	93 4c       	sbci	r25, 0xC3	; 195
    126e:	08 f4       	brcc	.+2      	; 0x1272 <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)+0x6a>
    1270:	75 c0       	rjmp	.+234    	; 0x135c <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)+0x154>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:72
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    1272:	f6 01       	movw	r30, r12
    1274:	80 81       	ld	r24, Z
    1276:	91 81       	ldd	r25, Z+1	; 0x01
    1278:	04 96       	adiw	r24, 0x04	; 4
    127a:	72 c0       	rjmp	.+228    	; 0x1360 <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)+0x158>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:57
static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
    127c:	88 81       	ld	r24, Y
    127e:	98 01       	movw	r18, r16
    1280:	28 0f       	add	r18, r24
    1282:	31 1d       	adc	r19, r1
    1284:	87 fd       	sbrc	r24, 7
    1286:	3a 95       	dec	r19
    1288:	c9 01       	movw	r24, r18
    128a:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <ServoCount>
    128e:	28 17       	cp	r18, r24
    1290:	19 06       	cpc	r1, r25
    1292:	99 f2       	breq	.-90     	; 0x123a <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)+0x32>
    1294:	94 f2       	brlt	.-92     	; 0x123a <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)+0x32>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:57 (discriminator 1)
    1296:	88 81       	ld	r24, Y
    1298:	a8 01       	movw	r20, r16
    129a:	48 0f       	add	r20, r24
    129c:	51 1d       	adc	r21, r1
    129e:	87 fd       	sbrc	r24, 7
    12a0:	5a 95       	dec	r21
    12a2:	fa 01       	movw	r30, r20
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	e4 0f       	add	r30, r20
    12aa:	f5 1f       	adc	r31, r21
    12ac:	ee 57       	subi	r30, 0x7E	; 126
    12ae:	fd 4f       	sbci	r31, 0xFD	; 253
    12b0:	80 81       	ld	r24, Z
    12b2:	86 ff       	sbrs	r24, 6
    12b4:	c2 cf       	rjmp	.-124    	; 0x123a <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)+0x32>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:58
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
    12b6:	88 81       	ld	r24, Y
    12b8:	f8 01       	movw	r30, r16
    12ba:	e8 0f       	add	r30, r24
    12bc:	f1 1d       	adc	r31, r1
    12be:	87 fd       	sbrc	r24, 7
    12c0:	fa 95       	dec	r31
    12c2:	cf 01       	movw	r24, r30
    12c4:	ee 0f       	add	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	e8 0f       	add	r30, r24
    12ca:	f9 1f       	adc	r31, r25
    12cc:	ee 57       	subi	r30, 0x7E	; 126
    12ce:	fd 4f       	sbci	r31, 0xFD	; 253
    12d0:	80 81       	ld	r24, Z
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	8f 73       	andi	r24, 0x3F	; 63
    12d6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
    12da:	af cf       	rjmp	.-162    	; 0x123a <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)+0x32>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:63
  }

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    12dc:	80 81       	ld	r24, Z
    12de:	91 81       	ldd	r25, Z+1	; 0x01
    12e0:	28 81       	ld	r18, Y
    12e2:	a8 01       	movw	r20, r16
    12e4:	42 0f       	add	r20, r18
    12e6:	51 1d       	adc	r21, r1
    12e8:	27 fd       	sbrc	r18, 7
    12ea:	5a 95       	dec	r21
    12ec:	9a 01       	movw	r18, r20
    12ee:	fa 01       	movw	r30, r20
    12f0:	ee 0f       	add	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	e2 0f       	add	r30, r18
    12f6:	f3 1f       	adc	r31, r19
    12f8:	ee 57       	subi	r30, 0x7E	; 126
    12fa:	fd 4f       	sbci	r31, 0xFD	; 253
    12fc:	21 81       	ldd	r18, Z+1	; 0x01
    12fe:	32 81       	ldd	r19, Z+2	; 0x02
    1300:	82 0f       	add	r24, r18
    1302:	93 1f       	adc	r25, r19
    1304:	f7 01       	movw	r30, r14
    1306:	91 83       	std	Z+1, r25	; 0x01
    1308:	80 83       	st	Z, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:64
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
    130a:	88 81       	ld	r24, Y
    130c:	98 01       	movw	r18, r16
    130e:	28 0f       	add	r18, r24
    1310:	31 1d       	adc	r19, r1
    1312:	87 fd       	sbrc	r24, 7
    1314:	3a 95       	dec	r19
    1316:	f9 01       	movw	r30, r18
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	e2 0f       	add	r30, r18
    131e:	f3 1f       	adc	r31, r19
    1320:	ee 57       	subi	r30, 0x7E	; 126
    1322:	fd 4f       	sbci	r31, 0xFD	; 253
    1324:	80 81       	ld	r24, Z
    1326:	86 ff       	sbrs	r24, 6
    1328:	20 c0       	rjmp	.+64     	; 0x136a <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)+0x162>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:65
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
    132a:	88 81       	ld	r24, Y
    132c:	08 0f       	add	r16, r24
    132e:	11 1d       	adc	r17, r1
    1330:	87 fd       	sbrc	r24, 7
    1332:	1a 95       	dec	r17
    1334:	f8 01       	movw	r30, r16
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	e0 0f       	add	r30, r16
    133c:	f1 1f       	adc	r31, r17
    133e:	ee 57       	subi	r30, 0x7E	; 126
    1340:	fd 4f       	sbci	r31, 0xFD	; 253
    1342:	80 81       	ld	r24, Z
    1344:	61 e0       	ldi	r22, 0x01	; 1
    1346:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:75
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	df 90       	pop	r13
    1356:	cf 90       	pop	r12
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:65

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
    1358:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <digitalWrite>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:70
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    135c:	80 e5       	ldi	r24, 0x50	; 80
    135e:	93 ec       	ldi	r25, 0xC3	; 195
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:72
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    1360:	f7 01       	movw	r30, r14
    1362:	91 83       	std	Z+1, r25	; 0x01
    1364:	80 83       	st	Z, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:73
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
    1366:	8f ef       	ldi	r24, 0xFF	; 255
    1368:	88 83       	st	Y, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:75
  }
}
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	df 90       	pop	r13
    1378:	cf 90       	pop	r12
    137a:	08 95       	ret

0000137c <__vector_13>:
__vector_13():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:81

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
    137c:	1f 92       	push	r1
    137e:	0f 92       	push	r0
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	0f 92       	push	r0
    1384:	11 24       	eor	r1, r1
    1386:	0b b6       	in	r0, 0x3b	; 59
    1388:	0f 92       	push	r0
    138a:	2f 93       	push	r18
    138c:	3f 93       	push	r19
    138e:	4f 93       	push	r20
    1390:	5f 93       	push	r21
    1392:	6f 93       	push	r22
    1394:	7f 93       	push	r23
    1396:	8f 93       	push	r24
    1398:	9f 93       	push	r25
    139a:	af 93       	push	r26
    139c:	bf 93       	push	r27
    139e:	ef 93       	push	r30
    13a0:	ff 93       	push	r31
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:82
  handle_interrupts(_timer1, &TCNT1, &OCR1A);
    13a2:	48 e8       	ldi	r20, 0x88	; 136
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	64 e8       	ldi	r22, 0x84	; 132
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 04 09 	call	0x1208	; 0x1208 <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:83
}
    13b2:	ff 91       	pop	r31
    13b4:	ef 91       	pop	r30
    13b6:	bf 91       	pop	r27
    13b8:	af 91       	pop	r26
    13ba:	9f 91       	pop	r25
    13bc:	8f 91       	pop	r24
    13be:	7f 91       	pop	r23
    13c0:	6f 91       	pop	r22
    13c2:	5f 91       	pop	r21
    13c4:	4f 91       	pop	r20
    13c6:	3f 91       	pop	r19
    13c8:	2f 91       	pop	r18
    13ca:	0f 90       	pop	r0
    13cc:	0b be       	out	0x3b, r0	; 59
    13ce:	0f 90       	pop	r0
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	0f 90       	pop	r0
    13d4:	1f 90       	pop	r1
    13d6:	18 95       	reti

000013d8 <__vector_32>:
__vector_32():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:88
#endif

#if defined(_useTimer3)
SIGNAL (TIMER3_COMPA_vect)
{
    13d8:	1f 92       	push	r1
    13da:	0f 92       	push	r0
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	0f 92       	push	r0
    13e0:	11 24       	eor	r1, r1
    13e2:	0b b6       	in	r0, 0x3b	; 59
    13e4:	0f 92       	push	r0
    13e6:	2f 93       	push	r18
    13e8:	3f 93       	push	r19
    13ea:	4f 93       	push	r20
    13ec:	5f 93       	push	r21
    13ee:	6f 93       	push	r22
    13f0:	7f 93       	push	r23
    13f2:	8f 93       	push	r24
    13f4:	9f 93       	push	r25
    13f6:	af 93       	push	r26
    13f8:	bf 93       	push	r27
    13fa:	ef 93       	push	r30
    13fc:	ff 93       	push	r31
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:89
  handle_interrupts(_timer3, &TCNT3, &OCR3A);
    13fe:	48 e9       	ldi	r20, 0x98	; 152
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	64 e9       	ldi	r22, 0x94	; 148
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	0e 94 04 09 	call	0x1208	; 0x1208 <handle_interrupts(timer16_Sequence_t, unsigned int volatile*, unsigned int volatile*)>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:90
}
    140e:	ff 91       	pop	r31
    1410:	ef 91       	pop	r30
    1412:	bf 91       	pop	r27
    1414:	af 91       	pop	r26
    1416:	9f 91       	pop	r25
    1418:	8f 91       	pop	r24
    141a:	7f 91       	pop	r23
    141c:	6f 91       	pop	r22
    141e:	5f 91       	pop	r21
    1420:	4f 91       	pop	r20
    1422:	3f 91       	pop	r19
    1424:	2f 91       	pop	r18
    1426:	0f 90       	pop	r0
    1428:	0b be       	out	0x3b, r0	; 59
    142a:	0f 90       	pop	r0
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	0f 90       	pop	r0
    1430:	1f 90       	pop	r1
    1432:	18 95       	reti

00001434 <Servo::Servo()>:
_ZN5ServoC2Ev():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:224
}


/****************** end of static functions ******************************/

Servo::Servo()
    1434:	fc 01       	movw	r30, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:226
{
  if( ServoCount < MAX_SERVOS) {
    1436:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <ServoCount>
    143a:	98 31       	cpi	r25, 0x18	; 24
    143c:	98 f4       	brcc	.+38     	; 0x1464 <Servo::Servo()+0x30>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:227
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	89 0f       	add	r24, r25
    1442:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <ServoCount>
    1446:	90 83       	st	Z, r25
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:228
    servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
    1448:	89 2f       	mov	r24, r25
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	fc 01       	movw	r30, r24
    144e:	ee 0f       	add	r30, r30
    1450:	ff 1f       	adc	r31, r31
    1452:	e8 0f       	add	r30, r24
    1454:	f9 1f       	adc	r31, r25
    1456:	ee 57       	subi	r30, 0x7E	; 126
    1458:	fd 4f       	sbci	r31, 0xFD	; 253
    145a:	86 ea       	ldi	r24, 0xA6	; 166
    145c:	9e e0       	ldi	r25, 0x0E	; 14
    145e:	92 83       	std	Z+2, r25	; 0x02
    1460:	81 83       	std	Z+1, r24	; 0x01
    1462:	08 95       	ret
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:231
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	80 83       	st	Z, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:232
}
    1468:	08 95       	ret

0000146a <Servo::attach(int, int, int)>:
_ZN5Servo6attachEiii():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:240
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
{
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	ec 01       	movw	r28, r24
    147a:	d6 2e       	mov	r13, r22
    147c:	7a 01       	movw	r14, r20
    147e:	89 01       	movw	r16, r18
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:241
  if(this->servoIndex < MAX_SERVOS ) {
    1480:	88 81       	ld	r24, Y
    1482:	88 31       	cpi	r24, 0x18	; 24
    1484:	08 f0       	brcs	.+2      	; 0x1488 <Servo::attach(int, int, int)+0x1e>
    1486:	67 c0       	rjmp	.+206    	; 0x1556 <Servo::attach(int, int, int)+0xec>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:242
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
    1488:	61 e0       	ldi	r22, 0x01	; 1
    148a:	8d 2d       	mov	r24, r13
    148c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:243
    servos[this->servoIndex].Pin.nbr = pin;
    1490:	88 81       	ld	r24, Y
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	f9 01       	movw	r30, r18
    1498:	ee 0f       	add	r30, r30
    149a:	ff 1f       	adc	r31, r31
    149c:	e2 0f       	add	r30, r18
    149e:	f3 1f       	adc	r31, r19
    14a0:	ee 57       	subi	r30, 0x7E	; 126
    14a2:	fd 4f       	sbci	r31, 0xFD	; 253
    14a4:	9d 2d       	mov	r25, r13
    14a6:	9f 73       	andi	r25, 0x3F	; 63
    14a8:	60 81       	ld	r22, Z
    14aa:	60 7c       	andi	r22, 0xC0	; 192
    14ac:	69 2b       	or	r22, r25
    14ae:	60 83       	st	Z, r22
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:245
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS
    14b0:	20 e2       	ldi	r18, 0x20	; 32
    14b2:	32 e0       	ldi	r19, 0x02	; 2
    14b4:	2e 19       	sub	r18, r14
    14b6:	3f 09       	sbc	r19, r15
    14b8:	37 ff       	sbrs	r19, 7
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <Servo::attach(int, int, int)+0x56>
    14bc:	2d 5f       	subi	r18, 0xFD	; 253
    14be:	3f 4f       	sbci	r19, 0xFF	; 255
    14c0:	35 95       	asr	r19
    14c2:	27 95       	ror	r18
    14c4:	35 95       	asr	r19
    14c6:	27 95       	ror	r18
    14c8:	29 83       	std	Y+1, r18	; 0x01
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:246
    this->max  = (MAX_PULSE_WIDTH - max)/4;
    14ca:	20 e6       	ldi	r18, 0x60	; 96
    14cc:	39 e0       	ldi	r19, 0x09	; 9
    14ce:	20 1b       	sub	r18, r16
    14d0:	31 0b       	sbc	r19, r17
    14d2:	37 ff       	sbrs	r19, 7
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <Servo::attach(int, int, int)+0x70>
    14d6:	2d 5f       	subi	r18, 0xFD	; 253
    14d8:	3f 4f       	sbci	r19, 0xFF	; 255
    14da:	35 95       	asr	r19
    14dc:	27 95       	ror	r18
    14de:	35 95       	asr	r19
    14e0:	27 95       	ror	r18
    14e2:	2a 83       	std	Y+2, r18	; 0x02
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:248
    // initialize the timer if it has not already been initialized
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    14e4:	2c e0       	ldi	r18, 0x0C	; 12
    14e6:	62 2f       	mov	r22, r18
    14e8:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__udivmodqi4>
isTimerActive():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:215

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
    14ec:	82 9f       	mul	r24, r18
    14ee:	b0 01       	movw	r22, r0
    14f0:	11 24       	eor	r1, r1
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	ab 01       	movw	r20, r22
    14f8:	42 0f       	add	r20, r18
    14fa:	53 1f       	adc	r21, r19
    14fc:	fa 01       	movw	r30, r20
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	e4 0f       	add	r30, r20
    1504:	f5 1f       	adc	r31, r21
    1506:	ee 57       	subi	r30, 0x7E	; 126
    1508:	fd 4f       	sbci	r31, 0xFD	; 253
    150a:	90 81       	ld	r25, Z
    150c:	96 fd       	sbrc	r25, 6
    150e:	16 c0       	rjmp	.+44     	; 0x153c <Servo::attach(int, int, int)+0xd2>
    1510:	2f 5f       	subi	r18, 0xFF	; 255
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:214
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    1514:	2c 30       	cpi	r18, 0x0C	; 12
    1516:	31 05       	cpc	r19, r1
    1518:	71 f7       	brne	.-36     	; 0x14f6 <Servo::attach(int, int, int)+0x8c>
initISR():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:127


static void initISR(timer16_Sequence_t timer)
{
#if defined (_useTimer1)
  if(timer == _timer1) {
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	29 f5       	brne	.+74     	; 0x1568 <Servo::attach(int, int, int)+0xfe>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:128
    TCCR1A = 0;             // normal counting mode
    151e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:129
    TCCR1B = _BV(CS11);     // set prescaler of 8
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:130
    TCNT1 = 0;              // clear the timer count
    1528:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    152c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:137
|| defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts;
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt
#else
    // here if not ATmega8/8535/16/32/64/128
    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts;
    1530:	b1 9a       	sbi	0x16, 1	; 22
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:138
    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt
    1532:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1536:	82 60       	ori	r24, 0x02	; 2
    1538:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
_ZN5Servo6attachEiii():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:251
    this->max  = (MAX_PULSE_WIDTH - max)/4;
    // initialize the timer if it has not already been initialized
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
    153c:	e8 81       	ld	r30, Y
    153e:	8e 2f       	mov	r24, r30
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	fc 01       	movw	r30, r24
    1544:	ee 0f       	add	r30, r30
    1546:	ff 1f       	adc	r31, r31
    1548:	e8 0f       	add	r30, r24
    154a:	f9 1f       	adc	r31, r25
    154c:	ee 57       	subi	r30, 0x7E	; 126
    154e:	fd 4f       	sbci	r31, 0xFD	; 253
    1550:	80 81       	ld	r24, Z
    1552:	80 64       	ori	r24, 0x40	; 64
    1554:	80 83       	st	Z, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:253
  }
  return this->servoIndex ;
    1556:	88 81       	ld	r24, Y
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:254
}
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	08 95       	ret
initISR():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:147
#endif
  }
#endif

#if defined (_useTimer3)
  if(timer == _timer3) {
    1568:	81 11       	cpse	r24, r1
    156a:	e8 cf       	rjmp	.-48     	; 0x153c <Servo::attach(int, int, int)+0xd2>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:148
    TCCR3A = 0;             // normal counting mode
    156c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:149
    TCCR3B = _BV(CS31);     // set prescaler of 8
    1570:	82 e0       	ldi	r24, 0x02	; 2
    1572:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:150
    TCNT3 = 0;              // clear the timer count
    1576:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    157a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:155
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF3A);     // clear any pending interrupts;
    ETIMSK |= _BV(OCIE3A);  // enable the output compare interrupt
#else
    TIFR3 = _BV(OCF3A);     // clear any pending interrupts;
    157e:	88 bb       	out	0x18, r24	; 24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:156
    TIMSK3 =  _BV(OCIE3A) ; // enable the output compare interrupt
    1580:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1584:	db cf       	rjmp	.-74     	; 0x153c <Servo::attach(int, int, int)+0xd2>

00001586 <Servo::attach(int)>:
_ZN5Servo6attachEi():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Servo\src/Servo.cpp:236
    this->servoIndex = INVALID_SERVO ;  // too many servos
}

uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
    1586:	20 e6       	ldi	r18, 0x60	; 96
    1588:	39 e0       	ldi	r19, 0x09	; 9
    158a:	40 e2       	ldi	r20, 0x20	; 32
    158c:	52 e0       	ldi	r21, 0x02	; 2
    158e:	0c 94 35 0a 	jmp	0x146a	; 0x146a <Servo::attach(int, int, int)>

00001592 <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:214
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
}
    1592:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <SoftwareSerial::active_object>
    1596:	30 91 0d 03 	lds	r19, 0x030D	; 0x80030d <SoftwareSerial::active_object+0x1>
    159a:	28 17       	cp	r18, r24
    159c:	39 07       	cpc	r19, r25
    159e:	b9 f4       	brne	.+46     	; 0x15ce <SoftwareSerial::read()+0x3c>
    15a0:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <SoftwareSerial::_receive_buffer_head>
    15a4:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <SoftwareSerial::_receive_buffer_tail>
    15a8:	98 17       	cp	r25, r24
    15aa:	89 f0       	breq	.+34     	; 0x15ce <SoftwareSerial::read()+0x3c>
    15ac:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <SoftwareSerial::_receive_buffer_head>
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	e4 53       	subi	r30, 0x34	; 52
    15b4:	fd 4f       	sbci	r31, 0xFD	; 253
    15b6:	80 81       	ld	r24, Z
    15b8:	20 91 ca 02 	lds	r18, 0x02CA	; 0x8002ca <SoftwareSerial::_receive_buffer_head>
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	2f 5f       	subi	r18, 0xFF	; 255
    15c0:	3f 4f       	sbci	r19, 0xFF	; 255
    15c2:	2f 73       	andi	r18, 0x3F	; 63
    15c4:	33 27       	eor	r19, r19
    15c6:	20 93 ca 02 	sts	0x02CA, r18	; 0x8002ca <SoftwareSerial::_receive_buffer_head>
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	08 95       	ret
    15ce:	8f ef       	ldi	r24, 0xFF	; 255
    15d0:	9f ef       	ldi	r25, 0xFF	; 255
    15d2:	08 95       	ret

000015d4 <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	dc 01       	movw	r26, r24
    15e2:	5c 96       	adiw	r26, 0x1c	; 28
    15e4:	ed 90       	ld	r14, X+
    15e6:	fc 90       	ld	r15, X
    15e8:	5d 97       	sbiw	r26, 0x1d	; 29
    15ea:	e1 14       	cp	r14, r1
    15ec:	f1 04       	cpc	r15, r1
    15ee:	79 f4       	brne	.+30     	; 0x160e <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	13 96       	adiw	r26, 0x03	; 3
    15f6:	9c 93       	st	X, r25
    15f8:	8e 93       	st	-X, r24
    15fa:	12 97       	sbiw	r26, 0x02	; 2
_ZN14SoftwareSerial5writeEh():
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	08 95       	ret
    160e:	51 96       	adiw	r26, 0x11	; 17
    1610:	ed 91       	ld	r30, X+
    1612:	fc 91       	ld	r31, X
    1614:	52 97       	sbiw	r26, 0x12	; 18
    1616:	50 96       	adiw	r26, 0x10	; 16
    1618:	8c 91       	ld	r24, X
    161a:	50 97       	sbiw	r26, 0x10	; 16
    161c:	98 2f       	mov	r25, r24
    161e:	90 95       	com	r25
    1620:	0f b7       	in	r16, 0x3f	; 63
    1622:	5e 96       	adiw	r26, 0x1e	; 30
    1624:	2c 91       	ld	r18, X
    1626:	5e 97       	sbiw	r26, 0x1e	; 30
    1628:	12 2f       	mov	r17, r18
    162a:	12 70       	andi	r17, 0x02	; 2
    162c:	21 fd       	sbrc	r18, 1
    162e:	60 95       	com	r22
    1630:	f8 94       	cli
    1632:	20 81       	ld	r18, Z
    1634:	11 23       	and	r17, r17
    1636:	19 f1       	breq	.+70     	; 0x167e <SoftwareSerial::write(unsigned char)+0xaa>
    1638:	28 2b       	or	r18, r24
    163a:	20 83       	st	Z, r18
_delay_loop_2():
    163c:	e7 01       	movw	r28, r14
    163e:	21 97       	sbiw	r28, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <SoftwareSerial::write(unsigned char)+0x6a>
    1642:	28 e0       	ldi	r18, 0x08	; 8
_ZN14SoftwareSerial5writeEh():
    1644:	46 2f       	mov	r20, r22
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	30 81       	ld	r19, Z
    164a:	60 ff       	sbrs	r22, 0
    164c:	1a c0       	rjmp	.+52     	; 0x1682 <SoftwareSerial::write(unsigned char)+0xae>
    164e:	38 2b       	or	r19, r24
    1650:	30 83       	st	Z, r19
_delay_loop_2():
    1652:	e7 01       	movw	r28, r14
    1654:	21 97       	sbiw	r28, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <SoftwareSerial::write(unsigned char)+0x80>
_ZN14SoftwareSerial5writeEh():
    1658:	ba 01       	movw	r22, r20
    165a:	75 95       	asr	r23
    165c:	67 95       	ror	r22
    165e:	21 50       	subi	r18, 0x01	; 1
    1660:	89 f7       	brne	.-30     	; 0x1644 <SoftwareSerial::write(unsigned char)+0x70>
    1662:	11 23       	and	r17, r17
    1664:	81 f0       	breq	.+32     	; 0x1686 <SoftwareSerial::write(unsigned char)+0xb2>
    1666:	80 81       	ld	r24, Z
    1668:	89 23       	and	r24, r25
    166a:	80 83       	st	Z, r24
    166c:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
    166e:	5c 96       	adiw	r26, 0x1c	; 28
    1670:	8d 91       	ld	r24, X+
    1672:	9c 91       	ld	r25, X
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <SoftwareSerial::write(unsigned char)+0xa0>
_ZN14SoftwareSerial5writeEh():
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	c1 cf       	rjmp	.-126    	; 0x1600 <SoftwareSerial::write(unsigned char)+0x2c>
    167e:	29 23       	and	r18, r25
    1680:	dc cf       	rjmp	.-72     	; 0x163a <SoftwareSerial::write(unsigned char)+0x66>
    1682:	39 23       	and	r19, r25
    1684:	e5 cf       	rjmp	.-54     	; 0x1650 <SoftwareSerial::write(unsigned char)+0x7c>
    1686:	90 81       	ld	r25, Z
    1688:	89 2b       	or	r24, r25
    168a:	ef cf       	rjmp	.-34     	; 0x166a <SoftwareSerial::write(unsigned char)+0x96>

0000168c <SoftwareSerial::flush()>:
_ZN14SoftwareSerial5flushEv():
    168c:	08 95       	ret

0000168e <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
    168e:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <SoftwareSerial::active_object>
    1692:	30 91 0d 03 	lds	r19, 0x030D	; 0x80030d <SoftwareSerial::active_object+0x1>
    1696:	28 17       	cp	r18, r24
    1698:	39 07       	cpc	r19, r25
    169a:	71 f4       	brne	.+28     	; 0x16b8 <SoftwareSerial::peek()+0x2a>
    169c:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <SoftwareSerial::_receive_buffer_head>
    16a0:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <SoftwareSerial::_receive_buffer_tail>
    16a4:	98 17       	cp	r25, r24
    16a6:	41 f0       	breq	.+16     	; 0x16b8 <SoftwareSerial::peek()+0x2a>
    16a8:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <SoftwareSerial::_receive_buffer_head>
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	e4 53       	subi	r30, 0x34	; 52
    16b0:	fd 4f       	sbci	r31, 0xFD	; 253
    16b2:	80 81       	ld	r24, Z
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	08 95       	ret
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	9f ef       	ldi	r25, 0xFF	; 255
    16bc:	08 95       	ret

000016be <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
    16be:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <SoftwareSerial::active_object>
    16c2:	30 91 0d 03 	lds	r19, 0x030D	; 0x80030d <SoftwareSerial::active_object+0x1>
    16c6:	28 17       	cp	r18, r24
    16c8:	39 07       	cpc	r19, r25
    16ca:	71 f4       	brne	.+28     	; 0x16e8 <SoftwareSerial::available()+0x2a>
    16cc:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <SoftwareSerial::_receive_buffer_tail>
    16d0:	20 91 ca 02 	lds	r18, 0x02CA	; 0x8002ca <SoftwareSerial::_receive_buffer_head>
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	80 5c       	subi	r24, 0xC0	; 192
    16d8:	9f 4f       	sbci	r25, 0xFF	; 255
    16da:	82 1b       	sub	r24, r18
    16dc:	91 09       	sbc	r25, r1
    16de:	60 e4       	ldi	r22, 0x40	; 64
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__divmodhi4>
    16e6:	08 95       	ret
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	08 95       	ret

000016ee <SoftwareSerial::stopListening()>:
_ZN14SoftwareSerial13stopListeningEv():
    16ee:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <SoftwareSerial::active_object>
    16f2:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <SoftwareSerial::active_object+0x1>
    16f6:	e8 17       	cp	r30, r24
    16f8:	f9 07       	cpc	r31, r25
    16fa:	69 f4       	brne	.+26     	; 0x1716 <SoftwareSerial::stopListening()+0x28>
_ZN14SoftwareSerial11setRxIntMskEb():
    16fc:	a3 89       	ldd	r26, Z+19	; 0x13
    16fe:	b4 89       	ldd	r27, Z+20	; 0x14
    1700:	9c 91       	ld	r25, X
    1702:	85 89       	ldd	r24, Z+21	; 0x15
    1704:	80 95       	com	r24
    1706:	89 23       	and	r24, r25
    1708:	8c 93       	st	X, r24
_ZN14SoftwareSerial13stopListeningEv():
    170a:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <SoftwareSerial::active_object+0x1>
    170e:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <SoftwareSerial::active_object>
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	08 95       	ret
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	08 95       	ret

0000171a <__vector_4>:
__vector_6():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:239
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    171a:	1f 92       	push	r1
    171c:	0f 92       	push	r0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	0f 92       	push	r0
    1722:	11 24       	eor	r1, r1
    1724:	0b b6       	in	r0, 0x3b	; 59
    1726:	0f 92       	push	r0
    1728:	2f 93       	push	r18
    172a:	3f 93       	push	r19
    172c:	4f 93       	push	r20
    172e:	5f 93       	push	r21
    1730:	6f 93       	push	r22
    1732:	7f 93       	push	r23
    1734:	8f 93       	push	r24
    1736:	9f 93       	push	r25
    1738:	af 93       	push	r26
    173a:	bf 93       	push	r27
    173c:	ef 93       	push	r30
    173e:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:231
#endif

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    1740:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <SoftwareSerial::active_object>
    1744:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <SoftwareSerial::active_object+0x1>
    1748:	30 97       	sbiw	r30, 0x00	; 0
    174a:	49 f0       	breq	.+18     	; 0x175e <__vector_4+0x44>
    174c:	a6 85       	ldd	r26, Z+14	; 0x0e
    174e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1750:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1752:	96 8d       	ldd	r25, Z+30	; 0x1e
    1754:	91 ff       	sbrs	r25, 1
    1756:	16 c0       	rjmp	.+44     	; 0x1784 <__vector_4+0x6a>
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1758:	9c 91       	ld	r25, X
    175a:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    175c:	b1 f4       	brne	.+44     	; 0x178a <__vector_4+0x70>
__vector_6():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    175e:	ff 91       	pop	r31
    1760:	ef 91       	pop	r30
    1762:	bf 91       	pop	r27
    1764:	af 91       	pop	r26
    1766:	9f 91       	pop	r25
    1768:	8f 91       	pop	r24
    176a:	7f 91       	pop	r23
    176c:	6f 91       	pop	r22
    176e:	5f 91       	pop	r21
    1770:	4f 91       	pop	r20
    1772:	3f 91       	pop	r19
    1774:	2f 91       	pop	r18
    1776:	0f 90       	pop	r0
    1778:	0b be       	out	0x3b, r0	; 59
    177a:	0f 90       	pop	r0
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	0f 90       	pop	r0
    1780:	1f 90       	pop	r1
    1782:	18 95       	reti
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1784:	9c 91       	ld	r25, X
    1786:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1788:	51 f7       	brne	.-44     	; 0x175e <__vector_4+0x44>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:450
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    178a:	a3 89       	ldd	r26, Z+19	; 0x13
    178c:	b4 89       	ldd	r27, Z+20	; 0x14
    178e:	9c 91       	ld	r25, X
    1790:	85 89       	ldd	r24, Z+21	; 0x15
    1792:	80 95       	com	r24
    1794:	89 23       	and	r24, r25
    1796:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\user\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1798:	86 89       	ldd	r24, Z+22	; 0x16
    179a:	97 89       	ldd	r25, Z+23	; 0x17
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <__vector_4+0x82>
_ZN14SoftwareSerial4recvEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:162
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    17a0:	60 8d       	ldd	r22, Z+24	; 0x18
    17a2:	71 8d       	ldd	r23, Z+25	; 0x19
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    17a4:	a6 85       	ldd	r26, Z+14	; 0x0e
    17a6:	b7 85       	ldd	r27, Z+15	; 0x0f
    17a8:	55 85       	ldd	r21, Z+13	; 0x0d
    17aa:	38 e0       	ldi	r19, 0x08	; 8
_ZN14SoftwareSerial4recvEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:144
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    17ac:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\user\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    17ae:	cb 01       	movw	r24, r22
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <__vector_4+0x96>
_ZN14SoftwareSerial4recvEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:163

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    17b4:	82 2f       	mov	r24, r18
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	95 95       	asr	r25
    17ba:	87 95       	ror	r24
    17bc:	28 2f       	mov	r18, r24
_ZN14SoftwareSerial11rx_pin_readEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    17be:	4c 91       	ld	r20, X
    17c0:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:165
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <__vector_4+0xac>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:166
        d |= 0x80;
    17c4:	20 68       	ori	r18, 0x80	; 128
    17c6:	31 50       	subi	r19, 0x01	; 1
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:160
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    17c8:	91 f7       	brne	.-28     	; 0x17ae <__vector_4+0x94>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:169
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    17ca:	86 8d       	ldd	r24, Z+30	; 0x1e
    17cc:	81 fd       	sbrc	r24, 1
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:170
      d = ~d;
    17ce:	20 95       	com	r18
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:173

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    17d0:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <SoftwareSerial::_receive_buffer_tail>
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	8f 73       	andi	r24, 0x3F	; 63
    17da:	99 27       	eor	r25, r25
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:174
    if (next != _receive_buffer_head)
    17dc:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <SoftwareSerial::_receive_buffer_head>
    17e0:	38 17       	cp	r19, r24
    17e2:	99 f0       	breq	.+38     	; 0x180a <__vector_4+0xf0>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:177
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    17e4:	a0 91 cb 02 	lds	r26, 0x02CB	; 0x8002cb <SoftwareSerial::_receive_buffer_tail>
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	a4 53       	subi	r26, 0x34	; 52
    17ec:	bd 4f       	sbci	r27, 0xFD	; 253
    17ee:	2c 93       	st	X, r18
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:178
      _receive_buffer_tail = next;
    17f0:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\user\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    17f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    17f6:	93 8d       	ldd	r25, Z+27	; 0x1b
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <__vector_4+0xde>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:448
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    17fc:	a3 89       	ldd	r26, Z+19	; 0x13
    17fe:	b4 89       	ldd	r27, Z+20	; 0x14
    1800:	8c 91       	ld	r24, X
    1802:	95 89       	ldd	r25, Z+21	; 0x15
    1804:	89 2b       	or	r24, r25
    1806:	8c 93       	st	X, r24
__vector_6():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    1808:	aa cf       	rjmp	.-172    	; 0x175e <__vector_4+0x44>
_ZN14SoftwareSerial4recvEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:183
      _receive_buffer_tail = next;
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    180a:	86 8d       	ldd	r24, Z+30	; 0x1e
    180c:	81 60       	ori	r24, 0x01	; 1
    180e:	86 8f       	std	Z+30, r24	; 0x1e
    1810:	f1 cf       	rjmp	.-30     	; 0x17f4 <__vector_4+0xda>

00001812 <SoftwareSerial::~SoftwareSerial()>:
_ZN14SoftwareSerialD2Ev():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:274
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    1812:	26 ef       	ldi	r18, 0xF6	; 246
    1814:	31 e0       	ldi	r19, 0x01	; 1
    1816:	fc 01       	movw	r30, r24
    1818:	31 83       	std	Z+1, r19	; 0x01
    181a:	20 83       	st	Z, r18
_ZN14SoftwareSerial3endEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:455
      *_pcint_maskreg &= ~_pcint_maskvalue;
}

void SoftwareSerial::end()
{
  stopListening();
    181c:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <SoftwareSerial::stopListening()>

00001820 <SoftwareSerial::setTX(signed char)>:
_ZN14SoftwareSerial5setTXEa():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:280
{
  end();
}

void SoftwareSerial::setTX(int8_t tx)
{
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	ec 01       	movw	r28, r24
    1828:	16 2f       	mov	r17, r22
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:285
  // First write, then set output. If we do this the other way around,
  // the pin would be output low for a short while before switching to
  // output high. Now, it is input with pullup for a short while, which
  // is fine. With inverse logic, either order is fine.
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
    182a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    182c:	66 95       	lsr	r22
    182e:	61 70       	andi	r22, 0x01	; 1
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	68 27       	eor	r22, r24
    1834:	81 2f       	mov	r24, r17
    1836:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:286
  pinMode(tx, OUTPUT);
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	81 2f       	mov	r24, r17
    183e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:287
  _transmitBitMask = digitalPinToBitMask(tx);
    1842:	81 2f       	mov	r24, r17
    1844:	11 0f       	add	r17, r17
    1846:	99 0b       	sbc	r25, r25
    1848:	fc 01       	movw	r30, r24
    184a:	e4 55       	subi	r30, 0x54	; 84
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	e4 91       	lpm	r30, Z
    1850:	e8 8b       	std	Y+16, r30	; 0x10
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:288
  uint8_t port = digitalPinToPort(tx);
    1852:	fc 01       	movw	r30, r24
    1854:	e4 53       	subi	r30, 0x34	; 52
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	e4 91       	lpm	r30, Z
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:289
  _transmitPortRegister = portOutputRegister(port);
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	ee 0f       	add	r30, r30
    185e:	ff 1f       	adc	r31, r31
    1860:	ea 50       	subi	r30, 0x0A	; 10
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	85 91       	lpm	r24, Z+
    1866:	94 91       	lpm	r25, Z
    1868:	9a 8b       	std	Y+18, r25	; 0x12
    186a:	89 8b       	std	Y+17, r24	; 0x11
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:290
}
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	08 95       	ret

00001874 <SoftwareSerial::setRX(signed char)>:
_ZN14SoftwareSerial5setRXEa():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:293

void SoftwareSerial::setRX(int8_t rx)
{
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	ec 01       	movw	r28, r24
    187c:	16 2f       	mov	r17, r22
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:294
  pinMode(rx, INPUT);
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	81 2f       	mov	r24, r17
    1882:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:295
  if (!_inverse_logic)
    1886:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1888:	81 fd       	sbrc	r24, 1
    188a:	04 c0       	rjmp	.+8      	; 0x1894 <SoftwareSerial::setRX(signed char)+0x20>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:296
    digitalWrite(rx, HIGH);  // pullup for normal logic!
    188c:	61 e0       	ldi	r22, 0x01	; 1
    188e:	81 2f       	mov	r24, r17
    1890:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <digitalWrite>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:297
  _receivePin = rx;
    1894:	1c 87       	std	Y+12, r17	; 0x0c
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:298
  _receiveBitMask = digitalPinToBitMask(rx);
    1896:	81 2f       	mov	r24, r17
    1898:	11 0f       	add	r17, r17
    189a:	99 0b       	sbc	r25, r25
    189c:	fc 01       	movw	r30, r24
    189e:	e4 55       	subi	r30, 0x54	; 84
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	e4 91       	lpm	r30, Z
    18a4:	ed 87       	std	Y+13, r30	; 0x0d
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:299
  uint8_t port = digitalPinToPort(rx);
    18a6:	fc 01       	movw	r30, r24
    18a8:	e4 53       	subi	r30, 0x34	; 52
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	e4 91       	lpm	r30, Z
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:300
  _receivePortRegister = portInputRegister(port);
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	ee 0f       	add	r30, r30
    18b2:	ff 1f       	adc	r31, r31
    18b4:	e4 51       	subi	r30, 0x14	; 20
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	85 91       	lpm	r24, Z+
    18ba:	94 91       	lpm	r25, Z
    18bc:	9f 87       	std	Y+15, r25	; 0x0f
    18be:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:301
}
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	08 95       	ret

000018c8 <SoftwareSerial::SoftwareSerial(signed char, signed char, bool)>:
_ZN14SoftwareSerialC2Eaab():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:259
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(int8_t receivePin, int8_t transmitPin, bool inverse_logic /* = false */) : 
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	ec 01       	movw	r28, r24
    18d0:	16 2f       	mov	r17, r22
_ZN5PrintC4Ev():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    18d2:	1b 82       	std	Y+3, r1	; 0x03
    18d4:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    18d6:	88 ee       	ldi	r24, 0xE8	; 232
    18d8:	93 e0       	ldi	r25, 0x03	; 3
    18da:	a0 e0       	ldi	r26, 0x00	; 0
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	8c 83       	std	Y+4, r24	; 0x04
    18e0:	9d 83       	std	Y+5, r25	; 0x05
    18e2:	ae 83       	std	Y+6, r26	; 0x06
    18e4:	bf 83       	std	Y+7, r27	; 0x07
_ZN14SoftwareSerialC2Eaab():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:265
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
    18e6:	86 ef       	ldi	r24, 0xF6	; 246
    18e8:	91 e0       	ldi	r25, 0x01	; 1
    18ea:	99 83       	std	Y+1, r25	; 0x01
    18ec:	88 83       	st	Y, r24
    18ee:	1f 8a       	std	Y+23, r1	; 0x17
    18f0:	1e 8a       	std	Y+22, r1	; 0x16
    18f2:	19 8e       	std	Y+25, r1	; 0x19
    18f4:	18 8e       	std	Y+24, r1	; 0x18
    18f6:	1b 8e       	std	Y+27, r1	; 0x1b
    18f8:	1a 8e       	std	Y+26, r1	; 0x1a
    18fa:	1d 8e       	std	Y+29, r1	; 0x1d
    18fc:	1c 8e       	std	Y+28, r1	; 0x1c
    18fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1900:	8e 7f       	andi	r24, 0xFE	; 254
    1902:	20 fb       	bst	r18, 0
    1904:	81 f9       	bld	r24, 1
    1906:	8e 8f       	std	Y+30, r24	; 0x1e
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:267
{
  setTX(transmitPin);
    1908:	64 2f       	mov	r22, r20
    190a:	ce 01       	movw	r24, r28
    190c:	0e 94 10 0c 	call	0x1820	; 0x1820 <SoftwareSerial::setTX(signed char)>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:268
  setRX(receivePin);
    1910:	61 2f       	mov	r22, r17
    1912:	ce 01       	movw	r24, r28
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:269
}
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:268
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
{
  setTX(transmitPin);
  setRX(receivePin);
    191a:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <SoftwareSerial::setRX(signed char)>

0000191e <__vector_18>:
__vector_18():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227
  cli();
  m = timer0_millis;
  SREG = oldSREG;

  return m;
}
    191e:	1f 92       	push	r1
    1920:	0f 92       	push	r0
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	0f 92       	push	r0
    1926:	11 24       	eor	r1, r1
    1928:	4f 93       	push	r20
    192a:	5f 93       	push	r21
    192c:	6f 93       	push	r22
    192e:	7f 93       	push	r23
    1930:	8f 93       	push	r24
    1932:	9f 93       	push	r25
    1934:	40 91 10 03 	lds	r20, 0x0310	; 0x800310 <timer0_millis>
    1938:	50 91 11 03 	lds	r21, 0x0311	; 0x800311 <timer0_millis+0x1>
    193c:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <timer0_millis+0x2>
    1940:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <timer0_millis+0x3>
    1944:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <timer0_fract>
    1948:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <timer0_exact.2342>
    194c:	94 30       	cpi	r25, 0x04	; 4
    194e:	19 f5       	brne	.+70     	; 0x1996 <__vector_18+0x78>
    1950:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <timer0_exact.2342>
    1954:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <timer0_exact.2342>
    1958:	90 fd       	sbrc	r25, 0
    195a:	21 c0       	rjmp	.+66     	; 0x199e <__vector_18+0x80>
    195c:	8a 59       	subi	r24, 0x9A	; 154
    195e:	8d 37       	cpi	r24, 0x7D	; 125
    1960:	28 f0       	brcs	.+10     	; 0x196c <__vector_18+0x4e>
    1962:	8d 57       	subi	r24, 0x7D	; 125
    1964:	4f 5f       	subi	r20, 0xFF	; 255
    1966:	5f 4f       	sbci	r21, 0xFF	; 255
    1968:	6f 4f       	sbci	r22, 0xFF	; 255
    196a:	7f 4f       	sbci	r23, 0xFF	; 255
    196c:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <timer0_fract>
    1970:	40 93 10 03 	sts	0x0310, r20	; 0x800310 <timer0_millis>
    1974:	50 93 11 03 	sts	0x0311, r21	; 0x800311 <timer0_millis+0x1>
    1978:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <timer0_millis+0x2>
    197c:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <timer0_millis+0x3>
    1980:	9f 91       	pop	r25
    1982:	8f 91       	pop	r24
    1984:	7f 91       	pop	r23
    1986:	6f 91       	pop	r22
    1988:	5f 91       	pop	r21
    198a:	4f 91       	pop	r20
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	0f 90       	pop	r0
    1992:	1f 90       	pop	r1
    1994:	18 95       	reti
    1996:	9f 5f       	subi	r25, 0xFF	; 255
    1998:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <timer0_exact.2342>
    199c:	db cf       	rjmp	.-74     	; 0x1954 <__vector_18+0x36>
    199e:	89 59       	subi	r24, 0x99	; 153
    19a0:	de cf       	rjmp	.-68     	; 0x195e <__vector_18+0x40>

000019a2 <micros>:
micros():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:229

unsigned long micros() {
    19a2:	cf 92       	push	r12
    19a4:	df 92       	push	r13
    19a6:	ef 92       	push	r14
    19a8:	ff 92       	push	r15
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    19aa:	6f b7       	in	r22, 0x3f	; 63
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    19ac:	f8 94       	cli
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:244

#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
    19ae:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <timer0_millis>
    19b2:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <timer0_millis+0x1>
    19b6:	a0 91 12 03 	lds	r26, 0x0312	; 0x800312 <timer0_millis+0x2>
    19ba:	b0 91 13 03 	lds	r27, 0x0313	; 0x800313 <timer0_millis+0x3>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:245
  f = timer0_fract;
    19be:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <timer0_fract>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
  m = timer0_overflow_count;
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    19c2:	26 b5       	in	r18, 0x26	; 38
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    19c4:	35 b3       	in	r19, 0x15	; 21
    19c6:	43 2f       	mov	r20, r19
    19c8:	41 70       	andi	r20, 0x01	; 1
    19ca:	30 ff       	sbrs	r19, 0
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <micros+0x34>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    19ce:	41 e0       	ldi	r20, 0x01	; 1
    19d0:	2f 3f       	cpi	r18, 0xFF	; 255
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <micros+0x34>
    19d4:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    19d6:	6f bf       	out	0x3f, r22	; 63
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:286
     Basically we multiply by 1000 and add the scaled timer.

     The leading part by m and f is long-term accurate.
     For the timer we just need to be close from below.
     Must never be too high, or micros jumps backwards. */
  m = (((m << 7) - (m << 1) - m + f) << 3) +
    19d8:	6c 01       	movw	r12, r24
    19da:	7d 01       	movw	r14, r26
    19dc:	37 e0       	ldi	r19, 0x07	; 7
    19de:	cc 0c       	add	r12, r12
    19e0:	dd 1c       	adc	r13, r13
    19e2:	ee 1c       	adc	r14, r14
    19e4:	ff 1c       	adc	r15, r15
    19e6:	3a 95       	dec	r19
    19e8:	d1 f7       	brne	.-12     	; 0x19de <micros+0x3c>
    19ea:	c5 0e       	add	r12, r21
    19ec:	d1 1c       	adc	r13, r1
    19ee:	e1 1c       	adc	r14, r1
    19f0:	f1 1c       	adc	r15, r1
    19f2:	c8 1a       	sub	r12, r24
    19f4:	d9 0a       	sbc	r13, r25
    19f6:	ea 0a       	sbc	r14, r26
    19f8:	fb 0a       	sbc	r15, r27
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	aa 1f       	adc	r26, r26
    1a00:	bb 1f       	adc	r27, r27
    1a02:	c8 1a       	sub	r12, r24
    1a04:	d9 0a       	sbc	r13, r25
    1a06:	ea 0a       	sbc	r14, r26
    1a08:	fb 0a       	sbc	r15, r27
    1a0a:	63 e0       	ldi	r22, 0x03	; 3
    1a0c:	cc 0c       	add	r12, r12
    1a0e:	dd 1c       	adc	r13, r13
    1a10:	ee 1c       	adc	r14, r14
    1a12:	ff 1c       	adc	r15, r15
    1a14:	6a 95       	dec	r22
    1a16:	d1 f7       	brne	.-12     	; 0x1a0c <micros+0x6a>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:287
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	a3 e3       	ldi	r26, 0x33	; 51
    1a1c:	b3 e0       	ldi	r27, 0x03	; 3
    1a1e:	0e 94 05 10 	call	0x200a	; 0x200a <__umulhisi3>
    1a22:	67 2f       	mov	r22, r23
    1a24:	78 2f       	mov	r23, r24
    1a26:	89 2f       	mov	r24, r25
    1a28:	99 27       	eor	r25, r25
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:286
     Basically we multiply by 1000 and add the scaled timer.

     The leading part by m and f is long-term accurate.
     For the timer we just need to be close from below.
     Must never be too high, or micros jumps backwards. */
  m = (((m << 7) - (m << 1) - m + f) << 3) +
    1a2a:	6c 0d       	add	r22, r12
    1a2c:	7d 1d       	adc	r23, r13
    1a2e:	8e 1d       	adc	r24, r14
    1a30:	9f 1d       	adc	r25, r15
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:288
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
    1a32:	44 23       	and	r20, r20
    1a34:	21 f0       	breq	.+8      	; 0x1a3e <micros+0x9c>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:288 (discriminator 1)
    1a36:	6d 5c       	subi	r22, 0xCD	; 205
    1a38:	7c 4f       	sbci	r23, 0xFC	; 252
    1a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    1a3e:	ff 90       	pop	r15
    1a40:	ef 90       	pop	r14
    1a42:	df 90       	pop	r13
    1a44:	cf 90       	pop	r12
    1a46:	08 95       	ret

00001a48 <delay>:
delay():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    1a48:	8f 92       	push	r8
    1a4a:	9f 92       	push	r9
    1a4c:	af 92       	push	r10
    1a4e:	bf 92       	push	r11
    1a50:	cf 92       	push	r12
    1a52:	df 92       	push	r13
    1a54:	ef 92       	push	r14
    1a56:	ff 92       	push	r15
    1a58:	6b 01       	movw	r12, r22
    1a5a:	7c 01       	movw	r14, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    1a5c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <micros>
    1a60:	4b 01       	movw	r8, r22
    1a62:	5c 01       	movw	r10, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    1a64:	c1 14       	cp	r12, r1
    1a66:	d1 04       	cpc	r13, r1
    1a68:	e1 04       	cpc	r14, r1
    1a6a:	f1 04       	cpc	r15, r1
    1a6c:	e9 f0       	breq	.+58     	; 0x1aa8 <delay+0x60>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    1a6e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <yield>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    1a72:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <micros>
    1a76:	68 19       	sub	r22, r8
    1a78:	79 09       	sbc	r23, r9
    1a7a:	8a 09       	sbc	r24, r10
    1a7c:	9b 09       	sbc	r25, r11
    1a7e:	68 3e       	cpi	r22, 0xE8	; 232
    1a80:	73 40       	sbci	r23, 0x03	; 3
    1a82:	81 05       	cpc	r24, r1
    1a84:	91 05       	cpc	r25, r1
    1a86:	70 f3       	brcs	.-36     	; 0x1a64 <delay+0x1c>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    1a88:	21 e0       	ldi	r18, 0x01	; 1
    1a8a:	c2 1a       	sub	r12, r18
    1a8c:	d1 08       	sbc	r13, r1
    1a8e:	e1 08       	sbc	r14, r1
    1a90:	f1 08       	sbc	r15, r1
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    1a92:	88 ee       	ldi	r24, 0xE8	; 232
    1a94:	88 0e       	add	r8, r24
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	98 1e       	adc	r9, r24
    1a9a:	a1 1c       	adc	r10, r1
    1a9c:	b1 1c       	adc	r11, r1
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    1a9e:	c1 14       	cp	r12, r1
    1aa0:	d1 04       	cpc	r13, r1
    1aa2:	e1 04       	cpc	r14, r1
    1aa4:	f1 04       	cpc	r15, r1
    1aa6:	29 f7       	brne	.-54     	; 0x1a72 <delay+0x2a>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    1aa8:	ff 90       	pop	r15
    1aaa:	ef 90       	pop	r14
    1aac:	df 90       	pop	r13
    1aae:	cf 90       	pop	r12
    1ab0:	bf 90       	pop	r11
    1ab2:	af 90       	pop	r10
    1ab4:	9f 90       	pop	r9
    1ab6:	8f 90       	pop	r8
    1ab8:	08 95       	ret

00001aba <delayMicroseconds>:
	...
delayMicroseconds():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:522
    us -= 8; // 2 cycles
             // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 20000000L
  __asm__ __volatile__ (
    1ac2:	00 00       	nop
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:530
    "nop" "\n\t"
    "nop" "\n\t"
    "nop"); // just waiting 5 cycles
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 19 (21) cycles, which is 1us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    1ac4:	82 30       	cpi	r24, 0x02	; 2
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	50 f0       	brcs	.+20     	; 0x1ade <delayMicroseconds+0x24>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:535

  // the following loop takes a 1/5 of a microsecond (4 cycles)
  // per iteration, so execute it five times for each microsecond of
  // delay requested.
  us = (us << 2) + us; // x5 us, = 7 cycles
    1aca:	9c 01       	movw	r18, r24
    1acc:	22 0f       	add	r18, r18
    1ace:	33 1f       	adc	r19, r19
    1ad0:	22 0f       	add	r18, r18
    1ad2:	33 1f       	adc	r19, r19
    1ad4:	07 97       	sbiw	r24, 0x07	; 7
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:540

  // account for the time taken in the preceeding commands.
  // we just burned 27 (29) cycles above, remove 7, (7*4=28)
  // to 2nd us is at least 10 so we can substract 7
  us -= 7; // = 2 cycles
    1ad6:	82 0f       	add	r24, r18
    1ad8:	93 1f       	adc	r25, r19
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <delayMicroseconds+0x20>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    1ade:	08 95       	ret

00001ae0 <init>:
init():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1ae0:	78 94       	sei
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1ae2:	84 b5       	in	r24, 0x24	; 36
    1ae4:	83 60       	ori	r24, 0x03	; 3
    1ae6:	84 bd       	out	0x24, r24	; 36
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    1ae8:	85 b5       	in	r24, 0x25	; 37
    1aea:	83 60       	ori	r24, 0x03	; 3
    1aec:	85 bd       	out	0x25, r24	; 37
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1aee:	ee e6       	ldi	r30, 0x6E	; 110
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	81 60       	ori	r24, 0x01	; 1
    1af6:	80 83       	st	Z, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1af8:	e1 e8       	ldi	r30, 0x81	; 129
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	82 e0       	ldi	r24, 0x02	; 2
    1afe:	80 83       	st	Z, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1b00:	80 81       	ld	r24, Z
    1b02:	81 60       	ori	r24, 0x01	; 1
    1b04:	80 83       	st	Z, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1b06:	e0 e8       	ldi	r30, 0x80	; 128
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	81 60       	ori	r24, 0x01	; 1
    1b0e:	80 83       	st	Z, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    1b10:	e1 eb       	ldi	r30, 0xB1	; 177
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	84 60       	ori	r24, 0x04	; 4
    1b18:	80 83       	st	Z, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    1b1a:	e0 eb       	ldi	r30, 0xB0	; 176
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	81 60       	ori	r24, 0x01	; 1
    1b22:	80 83       	st	Z, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    1b24:	e1 e9       	ldi	r30, 0x91	; 145
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	83 60       	ori	r24, 0x03	; 3
    1b2c:	80 83       	st	Z, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    1b2e:	e0 e9       	ldi	r30, 0x90	; 144
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	81 60       	ori	r24, 0x01	; 1
    1b36:	80 83       	st	Z, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    1b38:	87 e8       	ldi	r24, 0x87	; 135
    1b3a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    1b3e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    1b42:	08 95       	ret

00001b44 <analogRead>:
analogRead():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    1b44:	88 30       	cpi	r24, 0x08	; 8
    1b46:	20 f0       	brcs	.+8      	; 0x1b50 <analogRead+0xc>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    1b48:	87 31       	cpi	r24, 0x17	; 23
    1b4a:	08 f4       	brcc	.+2      	; 0x1b4e <analogRead+0xa>
    1b4c:	87 e1       	ldi	r24, 0x17	; 23
    1b4e:	88 51       	subi	r24, 0x18	; 24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 4)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    1b50:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <analog_reference>
    1b54:	90 e4       	ldi	r25, 0x40	; 64
    1b56:	29 9f       	mul	r18, r25
    1b58:	90 01       	movw	r18, r0
    1b5a:	11 24       	eor	r1, r1
    1b5c:	87 70       	andi	r24, 0x07	; 7
    1b5e:	82 2b       	or	r24, r18
    1b60:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 4)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    1b64:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b68:	80 64       	ori	r24, 0x40	; 64
    1b6a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    1b6e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b72:	86 fd       	sbrc	r24, 6
    1b74:	fc cf       	rjmp	.-8      	; 0x1b6e <analogRead+0x2a>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    1b76:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    1b7a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    1b7e:	08 95       	ret

00001b80 <analogWrite>:
analogWrite():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:104
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    1b80:	1f 93       	push	r17
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	18 2f       	mov	r17, r24
    1b88:	eb 01       	movw	r28, r22
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:110
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <pinMode>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:111
  if (val == 0)
    1b90:	20 97       	sbiw	r28, 0x00	; 0
    1b92:	39 f4       	brne	.+14     	; 0x1ba2 <analogWrite+0x22>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:113
  {
    digitalWrite(pin, LOW);
    1b94:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:117
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    1b96:	81 2f       	mov	r24, r17
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:308
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	1f 91       	pop	r17
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:117
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    1b9e:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <digitalWrite>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:115
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
    1ba2:	cf 3f       	cpi	r28, 0xFF	; 255
    1ba4:	d1 05       	cpc	r29, r1
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <analogWrite+0x2c>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:117
  {
    digitalWrite(pin, HIGH);
    1ba8:	61 e0       	ldi	r22, 0x01	; 1
    1baa:	f5 cf       	rjmp	.-22     	; 0x1b96 <analogWrite+0x16>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:121
  }
  else
  {
    switch(digitalPinToTimer(pin))
    1bac:	e1 2f       	mov	r30, r17
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	e4 57       	subi	r30, 0x74	; 116
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	e4 91       	lpm	r30, Z
    1bb6:	e2 50       	subi	r30, 0x02	; 2
    1bb8:	ea 30       	cpi	r30, 0x0A	; 10
    1bba:	08 f0       	brcs	.+2      	; 0x1bbe <analogWrite+0x3e>
    1bbc:	54 c0       	rjmp	.+168    	; 0x1c66 <analogWrite+0xe6>
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	ec 51       	subi	r30, 0x1C	; 28
    1bc2:	f2 4f       	sbci	r31, 0xF2	; 242
    1bc4:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__tablejump2__>
    1bc8:	ee 0d       	add	r30, r14
    1bca:	f6 0d       	add	r31, r6
    1bcc:	fb 0d       	add	r31, r11
    1bce:	05 0e       	add	r0, r21
    1bd0:	33 0e       	add	r3, r19
    1bd2:	33 0e       	add	r3, r19
    1bd4:	0f 0e       	add	r0, r31
    1bd6:	17 0e       	add	r1, r23
    1bd8:	1f 0e       	add	r1, r31
    1bda:	29 0e       	add	r2, r25
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:141
      #endif

      #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        // connect pwm to pin on timer 0, channel A
        TCCR0A |= _BV(COM0A1);
    1bdc:	84 b5       	in	r24, 0x24	; 36
    1bde:	80 68       	ori	r24, 0x80	; 128
    1be0:	84 bd       	out	0x24, r24	; 36
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:142
        OCR0A = val; // set pwm duty
    1be2:	c7 bd       	out	0x27, r28	; 39
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:308
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	1f 91       	pop	r17
    1bea:	08 95       	ret
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:149
      #endif

      #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        // connect pwm to pin on timer 0, channel B
        TCCR0A |= _BV(COM0B1);
    1bec:	84 b5       	in	r24, 0x24	; 36
    1bee:	80 62       	ori	r24, 0x20	; 32
    1bf0:	84 bd       	out	0x24, r24	; 36
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:150
        OCR0B = val; // set pwm duty
    1bf2:	c8 bd       	out	0x28, r28	; 40
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:151
        break;
    1bf4:	f7 cf       	rjmp	.-18     	; 0x1be4 <analogWrite+0x64>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:157
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
    1bf6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1bfa:	80 68       	ori	r24, 0x80	; 128
    1bfc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:158
        OCR1A = val; // set pwm duty
    1c00:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1c04:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:159
        break;
    1c08:	ed cf       	rjmp	.-38     	; 0x1be4 <analogWrite+0x64>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:165
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
    1c0a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1c0e:	80 62       	ori	r24, 0x20	; 32
    1c10:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:166
        OCR1B = val; // set pwm duty
    1c14:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1c18:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:167
        break;
    1c1c:	e3 cf       	rjmp	.-58     	; 0x1be4 <analogWrite+0x64>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:189
      #endif

      #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        // connect pwm to pin on timer 2, channel A
        TCCR2A |= _BV(COM2A1);
    1c1e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1c22:	80 68       	ori	r24, 0x80	; 128
    1c24:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:190
        OCR2A = val; // set pwm duty
    1c28:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:191
        break;
    1c2c:	db cf       	rjmp	.-74     	; 0x1be4 <analogWrite+0x64>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:197
      #endif

      #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        // connect pwm to pin on timer 2, channel B
        TCCR2A |= _BV(COM2B1);
    1c2e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1c32:	80 62       	ori	r24, 0x20	; 32
    1c34:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:198
        OCR2B = val; // set pwm duty
    1c38:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:199
        break;
    1c3c:	d3 cf       	rjmp	.-90     	; 0x1be4 <analogWrite+0x64>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:205
      #endif

      #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        // connect pwm to pin on timer 3, channel A
        TCCR3A |= _BV(COM3A1);
    1c3e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1c42:	80 68       	ori	r24, 0x80	; 128
    1c44:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:206
        OCR3A = val; // set pwm duty
    1c48:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1c4c:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:207
        break;
    1c50:	c9 cf       	rjmp	.-110    	; 0x1be4 <analogWrite+0x64>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:218
        #if defined(__AVR_ATmega328PB__) // Fix 324PB/328PB silicon bug
          PORTD |= _BV(PD2);
        #elif defined(__AVR_ATmega324PB__)
          PORTB |= _BV(PB7);
        #endif
        TCCR3A |= _BV(COM3B1);
    1c52:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1c56:	80 62       	ori	r24, 0x20	; 32
    1c58:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:219
        OCR3B = val; // set pwm duty
    1c5c:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1c60:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:220
        break;
    1c64:	bf cf       	rjmp	.-130    	; 0x1be4 <analogWrite+0x64>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:301
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
    1c66:	c0 38       	cpi	r28, 0x80	; 128
    1c68:	d1 05       	cpc	r29, r1
    1c6a:	0c f0       	brlt	.+2      	; 0x1c6e <analogWrite+0xee>
    1c6c:	9d cf       	rjmp	.-198    	; 0x1ba8 <analogWrite+0x28>
    1c6e:	92 cf       	rjmp	.-220    	; 0x1b94 <analogWrite+0x14>

00001c70 <turnOffPWM>:
turnOffPWM():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    1c70:	82 50       	subi	r24, 0x02	; 2
    1c72:	8a 30       	cpi	r24, 0x0A	; 10
    1c74:	88 f5       	brcc	.+98     	; 0x1cd8 <turnOffPWM+0x68>
    1c76:	e8 2f       	mov	r30, r24
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	ef 5b       	subi	r30, 0xBF	; 191
    1c7c:	f1 4f       	sbci	r31, 0xF1	; 241
    1c7e:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__tablejump2__>
    1c82:	69 0e       	add	r6, r25
    1c84:	6d 0e       	add	r6, r29
    1c86:	4b 0e       	add	r4, r27
    1c88:	51 0e       	add	r5, r17
    1c8a:	6c 0e       	add	r6, r28
    1c8c:	6c 0e       	add	r6, r28
    1c8e:	55 0e       	add	r5, r21
    1c90:	5b 0e       	add	r5, r27
    1c92:	5f 0e       	add	r5, r31
    1c94:	65 0e       	add	r6, r21
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    1c96:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1c9a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1c9c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    1ca0:	08 95       	ret
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1ca2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1ca6:	8f 7d       	andi	r24, 0xDF	; 223
    1ca8:	f9 cf       	rjmp	.-14     	; 0x1c9c <turnOffPWM+0x2c>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    1caa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1cae:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1cb0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    1cb4:	08 95       	ret
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1cb6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1cba:	8f 7d       	andi	r24, 0xDF	; 223
    1cbc:	f9 cf       	rjmp	.-14     	; 0x1cb0 <turnOffPWM+0x40>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    1cbe:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1cc2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    1cc4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    1cc8:	08 95       	ret
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    1cca:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1cce:	8f 7d       	andi	r24, 0xDF	; 223
    1cd0:	f9 cf       	rjmp	.-14     	; 0x1cc4 <turnOffPWM+0x54>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    1cd2:	84 b5       	in	r24, 0x24	; 36
    1cd4:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1cd6:	84 bd       	out	0x24, r24	; 36
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    1cd8:	08 95       	ret
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1cda:	84 b5       	in	r24, 0x24	; 36
    1cdc:	8f 7d       	andi	r24, 0xDF	; 223
    1cde:	fb cf       	rjmp	.-10     	; 0x1cd6 <turnOffPWM+0x66>

00001ce0 <pinMode>:
pinMode():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	e4 55       	subi	r30, 0x54	; 84
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	24 91       	lpm	r18, Z
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    1cee:	84 53       	subi	r24, 0x34	; 52
    1cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	84 91       	lpm	r24, Z
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    1cf6:	88 23       	and	r24, r24
    1cf8:	c9 f0       	breq	.+50     	; 0x1d2c <pinMode+0x4c>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	fc 01       	movw	r30, r24
    1d02:	e0 50       	subi	r30, 0x00	; 0
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	a5 91       	lpm	r26, Z+
    1d08:	b4 91       	lpm	r27, Z
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	ea 50       	subi	r30, 0x0A	; 10
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	c5 91       	lpm	r28, Z+
    1d12:	d4 91       	lpm	r29, Z
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    1d14:	61 11       	cpse	r22, r1
    1d16:	0d c0       	rjmp	.+26     	; 0x1d32 <pinMode+0x52>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    1d18:	9f b7       	in	r25, 0x3f	; 63
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    1d1a:	f8 94       	cli
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    1d1c:	8c 91       	ld	r24, X
    1d1e:	20 95       	com	r18
    1d20:	82 23       	and	r24, r18
    1d22:	8c 93       	st	X, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    1d24:	88 81       	ld	r24, Y
    1d26:	28 23       	and	r18, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1d28:	28 83       	st	Y, r18
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1d2a:	9f bf       	out	0x3f, r25	; 63
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	08 95       	ret
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    1d32:	62 30       	cpi	r22, 0x02	; 2
    1d34:	51 f4       	brne	.+20     	; 0x1d4a <pinMode+0x6a>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1d36:	9f b7       	in	r25, 0x3f	; 63
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    1d38:	f8 94       	cli
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1d3a:	3c 91       	ld	r19, X
    1d3c:	82 2f       	mov	r24, r18
    1d3e:	80 95       	com	r24
    1d40:	83 23       	and	r24, r19
    1d42:	8c 93       	st	X, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    1d44:	e8 81       	ld	r30, Y
    1d46:	2e 2b       	or	r18, r30
    1d48:	ef cf       	rjmp	.-34     	; 0x1d28 <pinMode+0x48>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1d4a:	8f b7       	in	r24, 0x3f	; 63
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    1d4c:	f8 94       	cli
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    1d4e:	ec 91       	ld	r30, X
    1d50:	2e 2b       	or	r18, r30
    1d52:	2c 93       	st	X, r18
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    1d54:	8f bf       	out	0x3f, r24	; 63
    1d56:	ea cf       	rjmp	.-44     	; 0x1d2c <pinMode+0x4c>

00001d58 <digitalWrite>:
digitalWrite():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1d58:	1f 93       	push	r17
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	f9 01       	movw	r30, r18
    1d64:	e4 57       	subi	r30, 0x74	; 116
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	84 91       	lpm	r24, Z
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    1d6a:	f9 01       	movw	r30, r18
    1d6c:	e4 55       	subi	r30, 0x54	; 84
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	d4 91       	lpm	r29, Z
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    1d72:	f9 01       	movw	r30, r18
    1d74:	e4 53       	subi	r30, 0x34	; 52
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	c4 91       	lpm	r28, Z
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    1d7a:	cc 23       	and	r28, r28
    1d7c:	a9 f0       	breq	.+42     	; 0x1da8 <digitalWrite+0x50>
    1d7e:	16 2f       	mov	r17, r22
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1d80:	81 11       	cpse	r24, r1
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    1d82:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <turnOffPWM>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    1d86:	ec 2f       	mov	r30, r28
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	ee 0f       	add	r30, r30
    1d8c:	ff 1f       	adc	r31, r31
    1d8e:	ea 50       	subi	r30, 0x0A	; 10
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	a5 91       	lpm	r26, Z+
    1d94:	b4 91       	lpm	r27, Z
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    1d96:	8f b7       	in	r24, 0x3f	; 63
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    1d98:	f8 94       	cli
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    1d9a:	ec 91       	ld	r30, X
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    1d9c:	11 11       	cpse	r17, r1
    1d9e:	08 c0       	rjmp	.+16     	; 0x1db0 <digitalWrite+0x58>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    1da0:	d0 95       	com	r29
    1da2:	de 23       	and	r29, r30
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    1da4:	dc 93       	st	X, r29
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    1da6:	8f bf       	out	0x3f, r24	; 63
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	1f 91       	pop	r17
    1dae:	08 95       	ret
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    1db0:	de 2b       	or	r29, r30
    1db2:	f8 cf       	rjmp	.-16     	; 0x1da4 <digitalWrite+0x4c>

00001db4 <digitalRead>:
digitalRead():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	f9 01       	movw	r30, r18
    1dbe:	e4 57       	subi	r30, 0x74	; 116
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	84 91       	lpm	r24, Z
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    1dc4:	f9 01       	movw	r30, r18
    1dc6:	e4 55       	subi	r30, 0x54	; 84
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	d4 91       	lpm	r29, Z
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    1dcc:	f9 01       	movw	r30, r18
    1dce:	e4 53       	subi	r30, 0x34	; 52
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	c4 91       	lpm	r28, Z
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    1dd4:	cc 23       	and	r28, r28
    1dd6:	a1 f0       	breq	.+40     	; 0x1e00 <digitalRead+0x4c>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1dd8:	81 11       	cpse	r24, r1
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    1dda:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <turnOffPWM>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    1dde:	ec 2f       	mov	r30, r28
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	ee 0f       	add	r30, r30
    1de4:	ff 1f       	adc	r31, r31
    1de6:	e4 51       	subi	r30, 0x14	; 20
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	a5 91       	lpm	r26, Z+
    1dec:	b4 91       	lpm	r27, Z
    1dee:	ec 91       	ld	r30, X
    1df0:	ed 23       	and	r30, r29
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <digitalRead+0x46>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	08 95       	ret
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	fa cf       	rjmp	.-12     	; 0x1dfa <digitalRead+0x46>

00001e06 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:58
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    1e06:	af 92       	push	r10
    1e08:	bf 92       	push	r11
    1e0a:	cf 92       	push	r12
    1e0c:	df 92       	push	r13
    1e0e:	ef 92       	push	r14
    1e10:	ff 92       	push	r15
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	6c 01       	movw	r12, r24
    1e1c:	7b 01       	movw	r14, r22
    1e1e:	8b 01       	movw	r16, r22
    1e20:	04 0f       	add	r16, r20
    1e22:	15 1f       	adc	r17, r21
    1e24:	eb 01       	movw	r28, r22
    1e26:	5e 01       	movw	r10, r28
    1e28:	ae 18       	sub	r10, r14
    1e2a:	bf 08       	sbc	r11, r15
    1e2c:	c0 17       	cp	r28, r16
    1e2e:	d1 07       	cpc	r29, r17
    1e30:	59 f0       	breq	.+22     	; 0x1e48 <Print::write(unsigned char const*, unsigned int)+0x42>
    1e32:	69 91       	ld	r22, Y+
    1e34:	d6 01       	movw	r26, r12
    1e36:	ed 91       	ld	r30, X+
    1e38:	fc 91       	ld	r31, X
    1e3a:	01 90       	ld	r0, Z+
    1e3c:	f0 81       	ld	r31, Z
    1e3e:	e0 2d       	mov	r30, r0
    1e40:	c6 01       	movw	r24, r12
    1e42:	09 95       	icall
    1e44:	89 2b       	or	r24, r25
    1e46:	79 f7       	brne	.-34     	; 0x1e26 <Print::write(unsigned char const*, unsigned int)+0x20>
    1e48:	c5 01       	movw	r24, r10
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	ff 90       	pop	r15
    1e54:	ef 90       	pop	r14
    1e56:	df 90       	pop	r13
    1e58:	cf 90       	pop	r12
    1e5a:	bf 90       	pop	r11
    1e5c:	af 90       	pop	r10
    1e5e:	08 95       	ret

00001e60 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    1e60:	fb 01       	movw	r30, r22
    1e62:	01 90       	ld	r0, Z+
    1e64:	00 20       	and	r0, r0
    1e66:	e9 f7       	brne	.-6      	; 0x1e62 <Print::write(char const*) [clone .part.2]+0x2>
    1e68:	31 97       	sbiw	r30, 0x01	; 1
    1e6a:	af 01       	movw	r20, r30
    1e6c:	46 1b       	sub	r20, r22
    1e6e:	57 0b       	sbc	r21, r23
    1e70:	dc 01       	movw	r26, r24
    1e72:	ed 91       	ld	r30, X+
    1e74:	fc 91       	ld	r31, X
    1e76:	02 80       	ldd	r0, Z+2	; 0x02
    1e78:	f3 81       	ldd	r31, Z+3	; 0x03
    1e7a:	e0 2d       	mov	r30, r0
    1e7c:	09 94       	ijmp

00001e7e <Print::print(char const*)>:
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1e7e:	61 15       	cp	r22, r1
    1e80:	71 05       	cpc	r23, r1
    1e82:	11 f0       	breq	.+4      	; 0x1e88 <Print::print(char const*)+0xa>
    1e84:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	08 95       	ret

00001e8e <String::~String()>:
_ZN6StringD2Ev():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    1e8e:	fc 01       	movw	r30, r24
    1e90:	80 81       	ld	r24, Z
    1e92:	91 81       	ldd	r25, Z+1	; 0x01
    1e94:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <free>

00001e98 <String::invalidate()>:
_ZN6String10invalidateEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
    1e98:	cf 93       	push	r28
    1e9a:	df 93       	push	r29
    1e9c:	ec 01       	movw	r28, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
    1e9e:	88 81       	ld	r24, Y
    1ea0:	99 81       	ldd	r25, Y+1	; 0x01
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	11 f0       	breq	.+4      	; 0x1eaa <String::invalidate()+0x12>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140 (discriminator 1)
    1ea6:	0e 94 c4 10 	call	0x2188	; 0x2188 <free>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
    1eaa:	19 82       	std	Y+1, r1	; 0x01
    1eac:	18 82       	st	Y, r1
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
    1eae:	1d 82       	std	Y+5, r1	; 0x05
    1eb0:	1c 82       	std	Y+4, r1	; 0x04
    1eb2:	1b 82       	std	Y+3, r1	; 0x03
    1eb4:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:143
}
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	08 95       	ret

00001ebc <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:156
  }
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    1ebc:	0f 93       	push	r16
    1ebe:	1f 93       	push	r17
    1ec0:	cf 93       	push	r28
    1ec2:	df 93       	push	r29
    1ec4:	ec 01       	movw	r28, r24
    1ec6:	8b 01       	movw	r16, r22
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:157
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1ec8:	6f 5f       	subi	r22, 0xFF	; 255
    1eca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ecc:	88 81       	ld	r24, Y
    1ece:	99 81       	ldd	r25, Y+1	; 0x01
    1ed0:	0e 94 4d 11 	call	0x229a	; 0x229a <realloc>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	51 f0       	breq	.+20     	; 0x1eec <String::changeBuffer(unsigned int)+0x30>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
    1ed8:	99 83       	std	Y+1, r25	; 0x01
    1eda:	88 83       	st	Y, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
    1edc:	1b 83       	std	Y+3, r17	; 0x03
    1ede:	0a 83       	std	Y+2, r16	; 0x02
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:161
    return 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:164
  }
  return 0;
}
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
    1eea:	08 95       	ret
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:163
  if (newbuffer) {
    buffer = newbuffer;
    capacity = maxStrLen;
    return 1;
  }
  return 0;
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	f9 cf       	rjmp	.-14     	; 0x1ee2 <String::changeBuffer(unsigned int)+0x26>

00001ef0 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:146
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	ec 01       	movw	r28, r24
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
    1ef6:	88 81       	ld	r24, Y
    1ef8:	99 81       	ldd	r25, Y+1	; 0x01
    1efa:	89 2b       	or	r24, r25
    1efc:	49 f0       	breq	.+18     	; 0x1f10 <String::reserve(unsigned int)+0x20>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147 (discriminator 1)
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	9b 81       	ldd	r25, Y+3	; 0x03
    1f02:	86 17       	cp	r24, r22
    1f04:	97 07       	cpc	r25, r23
    1f06:	20 f0       	brcs	.+8      	; 0x1f10 <String::reserve(unsigned int)+0x20>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    1f08:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	08 95       	ret
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:148
}

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    1f10:	ce 01       	movw	r24, r28
    1f12:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <String::changeBuffer(unsigned int)>
    1f16:	88 23       	and	r24, r24
    1f18:	c1 f3       	breq	.-16     	; 0x1f0a <String::reserve(unsigned int)+0x1a>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
    if (len == 0) buffer[0] = 0;
    1f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1e:	89 2b       	or	r24, r25
    1f20:	99 f7       	brne	.-26     	; 0x1f08 <String::reserve(unsigned int)+0x18>
    1f22:	e8 81       	ld	r30, Y
    1f24:	f9 81       	ldd	r31, Y+1	; 0x01
    1f26:	10 82       	st	Z, r1
    1f28:	ef cf       	rjmp	.-34     	; 0x1f08 <String::reserve(unsigned int)+0x18>

00001f2a <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    1f2a:	ef 92       	push	r14
    1f2c:	ff 92       	push	r15
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	ec 01       	movw	r28, r24
    1f38:	7b 01       	movw	r14, r22
    1f3a:	8a 01       	movw	r16, r20
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
  if (!reserve(length)) {
    1f3c:	ba 01       	movw	r22, r20
    1f3e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <String::reserve(unsigned int)>
    1f42:	81 11       	cpse	r24, r1
    1f44:	0b c0       	rjmp	.+22     	; 0x1f5c <String::copy(char const*, unsigned int)+0x32>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    1f46:	ce 01       	movw	r24, r28
    1f48:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <String::invalidate()>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:179
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	ff 90       	pop	r15
    1f58:	ef 90       	pop	r14
    1f5a:	08 95       	ret
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    1f5c:	1d 83       	std	Y+5, r17	; 0x05
    1f5e:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    1f60:	b7 01       	movw	r22, r14
    1f62:	88 81       	ld	r24, Y
    1f64:	99 81       	ldd	r25, Y+1	; 0x01
    1f66:	0e 94 37 12 	call	0x246e	; 0x246e <strcpy>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:178
  return *this;
    1f6a:	f0 cf       	rjmp	.-32     	; 0x1f4c <String::copy(char const*, unsigned int)+0x22>

00001f6c <String::String(char const*)>:
_ZN6String4initEv():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	11 82       	std	Z+1, r1	; 0x01
    1f70:	10 82       	st	Z, r1
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    1f72:	13 82       	std	Z+3, r1	; 0x03
    1f74:	12 82       	std	Z+2, r1	; 0x02
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    1f76:	15 82       	std	Z+5, r1	; 0x05
    1f78:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    1f7a:	61 15       	cp	r22, r1
    1f7c:	71 05       	cpc	r23, r1
    1f7e:	51 f0       	breq	.+20     	; 0x1f94 <String::String(char const*)+0x28>
    1f80:	fb 01       	movw	r30, r22
    1f82:	01 90       	ld	r0, Z+
    1f84:	00 20       	and	r0, r0
    1f86:	e9 f7       	brne	.-6      	; 0x1f82 <String::String(char const*)+0x16>
    1f88:	31 97       	sbiw	r30, 0x01	; 1
    1f8a:	af 01       	movw	r20, r30
    1f8c:	46 1b       	sub	r20, r22
    1f8e:	57 0b       	sbc	r21, r23
    1f90:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <String::copy(char const*, unsigned int)>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32
}
    1f94:	08 95       	ret

00001f96 <initVariant>:
initVariant():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1f96:	08 95       	ret

00001f98 <main>:
main():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1f98:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <init>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    1f9c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <initVariant>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1fa0:	0e 94 99 04 	call	0x932	; 0x932 <setup>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1fa4:	c0 e0       	ldi	r28, 0x00	; 0
    1fa6:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1fa8:	0e 94 75 07 	call	0xeea	; 0xeea <loop>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1fac:	20 97       	sbiw	r28, 0x00	; 0
    1fae:	e1 f3       	breq	.-8      	; 0x1fa8 <main+0x10>
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1fb0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1fb4:	f9 cf       	rjmp	.-14     	; 0x1fa8 <main+0x10>

00001fb6 <yield>:
__empty():
C:\Users\user\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    1fb6:	08 95       	ret

00001fb8 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    1fb8:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    1fba:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    1fbc:	04 c0       	rjmp	.+8      	; 0x1fc6 <__udivmodqi4_ep>

00001fbe <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    1fbe:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    1fc0:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    1fc2:	08 f0       	brcs	.+2      	; 0x1fc6 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    1fc4:	96 1b       	sub	r25, r22

00001fc6 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    1fc6:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    1fc8:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    1fca:	c9 f7       	brne	.-14     	; 0x1fbe <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    1fcc:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    1fce:	08 95       	ret

00001fd0 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    1fd0:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    1fd2:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    1fd4:	16 f4       	brtc	.+4      	; 0x1fda <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    1fd6:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    1fd8:	07 d0       	rcall	.+14     	; 0x1fe8 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    1fda:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    1fdc:	09 d0       	rcall	.+18     	; 0x1ff0 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    1fde:	0e 94 14 10 	call	0x2028	; 0x2028 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    1fe2:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    1fe4:	05 d0       	rcall	.+10     	; 0x1ff0 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    1fe6:	3e f4       	brtc	.+14     	; 0x1ff6 <__divmodhi4_exit>

00001fe8 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    1fe8:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    1fea:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    1fec:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    1fee:	08 95       	ret

00001ff0 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    1ff0:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    1ff2:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    1ff4:	7f 4f       	sbci	r23, 0xFF	; 255

00001ff6 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    1ff6:	08 95       	ret

00001ff8 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1ff8:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1ffa:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    1ffc:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    1ffe:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    2000:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    2002:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    2004:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    2006:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    2008:	09 94       	ijmp

0000200a <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    200a:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    200c:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    200e:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    2010:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    2012:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    2014:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    2016:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    2018:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    201a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    201c:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    201e:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    2020:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    2022:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    2024:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    2026:	08 95       	ret

00002028 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    2028:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    202a:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    202c:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    202e:	07 c0       	rjmp	.+14     	; 0x203e <__udivmodhi4_ep>

00002030 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    2030:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    2032:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    2034:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    2036:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    2038:	10 f0       	brcs	.+4      	; 0x203e <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    203a:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    203c:	b7 0b       	sbc	r27, r23

0000203e <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    203e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    2040:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    2042:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    2044:	a9 f7       	brne	.-22     	; 0x2030 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    2046:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    2048:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    204a:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    204c:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    204e:	08 95       	ret

00002050 <malloc>:
malloc():
    2050:	0f 93       	push	r16
    2052:	1f 93       	push	r17
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	82 30       	cpi	r24, 0x02	; 2
    205a:	91 05       	cpc	r25, r1
    205c:	10 f4       	brcc	.+4      	; 0x2062 <malloc+0x12>
    205e:	82 e0       	ldi	r24, 0x02	; 2
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <__flp>
    2066:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <__flp+0x1>
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	a0 e0       	ldi	r26, 0x00	; 0
    2072:	30 97       	sbiw	r30, 0x00	; 0
    2074:	99 f4       	brne	.+38     	; 0x209c <malloc+0x4c>
    2076:	21 15       	cp	r18, r1
    2078:	31 05       	cpc	r19, r1
    207a:	09 f4       	brne	.+2      	; 0x207e <malloc+0x2e>
    207c:	4a c0       	rjmp	.+148    	; 0x2112 <malloc+0xc2>
    207e:	28 1b       	sub	r18, r24
    2080:	39 0b       	sbc	r19, r25
    2082:	24 30       	cpi	r18, 0x04	; 4
    2084:	31 05       	cpc	r19, r1
    2086:	d8 f5       	brcc	.+118    	; 0x20fe <malloc+0xae>
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	9b 81       	ldd	r25, Y+3	; 0x03
    208c:	61 15       	cp	r22, r1
    208e:	71 05       	cpc	r23, r1
    2090:	89 f1       	breq	.+98     	; 0x20f4 <malloc+0xa4>
    2092:	fb 01       	movw	r30, r22
    2094:	93 83       	std	Z+3, r25	; 0x03
    2096:	82 83       	std	Z+2, r24	; 0x02
    2098:	fe 01       	movw	r30, r28
    209a:	11 c0       	rjmp	.+34     	; 0x20be <malloc+0x6e>
    209c:	40 81       	ld	r20, Z
    209e:	51 81       	ldd	r21, Z+1	; 0x01
    20a0:	02 81       	ldd	r16, Z+2	; 0x02
    20a2:	13 81       	ldd	r17, Z+3	; 0x03
    20a4:	48 17       	cp	r20, r24
    20a6:	59 07       	cpc	r21, r25
    20a8:	e0 f0       	brcs	.+56     	; 0x20e2 <malloc+0x92>
    20aa:	48 17       	cp	r20, r24
    20ac:	59 07       	cpc	r21, r25
    20ae:	99 f4       	brne	.+38     	; 0x20d6 <malloc+0x86>
    20b0:	10 97       	sbiw	r26, 0x00	; 0
    20b2:	61 f0       	breq	.+24     	; 0x20cc <malloc+0x7c>
    20b4:	12 96       	adiw	r26, 0x02	; 2
    20b6:	0c 93       	st	X, r16
    20b8:	12 97       	sbiw	r26, 0x02	; 2
    20ba:	13 96       	adiw	r26, 0x03	; 3
    20bc:	1c 93       	st	X, r17
    20be:	32 96       	adiw	r30, 0x02	; 2
    20c0:	cf 01       	movw	r24, r30
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	08 95       	ret
    20cc:	00 93 16 03 	sts	0x0316, r16	; 0x800316 <__flp>
    20d0:	10 93 17 03 	sts	0x0317, r17	; 0x800317 <__flp+0x1>
    20d4:	f4 cf       	rjmp	.-24     	; 0x20be <malloc+0x6e>
    20d6:	21 15       	cp	r18, r1
    20d8:	31 05       	cpc	r19, r1
    20da:	51 f0       	breq	.+20     	; 0x20f0 <malloc+0xa0>
    20dc:	42 17       	cp	r20, r18
    20de:	53 07       	cpc	r21, r19
    20e0:	38 f0       	brcs	.+14     	; 0x20f0 <malloc+0xa0>
    20e2:	a9 01       	movw	r20, r18
    20e4:	db 01       	movw	r26, r22
    20e6:	9a 01       	movw	r18, r20
    20e8:	bd 01       	movw	r22, r26
    20ea:	df 01       	movw	r26, r30
    20ec:	f8 01       	movw	r30, r16
    20ee:	c1 cf       	rjmp	.-126    	; 0x2072 <malloc+0x22>
    20f0:	ef 01       	movw	r28, r30
    20f2:	f9 cf       	rjmp	.-14     	; 0x20e6 <malloc+0x96>
    20f4:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <__flp+0x1>
    20f8:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <__flp>
    20fc:	cd cf       	rjmp	.-102    	; 0x2098 <malloc+0x48>
    20fe:	fe 01       	movw	r30, r28
    2100:	e2 0f       	add	r30, r18
    2102:	f3 1f       	adc	r31, r19
    2104:	81 93       	st	Z+, r24
    2106:	91 93       	st	Z+, r25
    2108:	22 50       	subi	r18, 0x02	; 2
    210a:	31 09       	sbc	r19, r1
    210c:	39 83       	std	Y+1, r19	; 0x01
    210e:	28 83       	st	Y, r18
    2110:	d7 cf       	rjmp	.-82     	; 0x20c0 <malloc+0x70>
    2112:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <__brkval>
    2116:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <__brkval+0x1>
    211a:	23 2b       	or	r18, r19
    211c:	41 f4       	brne	.+16     	; 0x212e <malloc+0xde>
    211e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2122:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2126:	30 93 15 03 	sts	0x0315, r19	; 0x800315 <__brkval+0x1>
    212a:	20 93 14 03 	sts	0x0314, r18	; 0x800314 <__brkval>
    212e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2132:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2136:	21 15       	cp	r18, r1
    2138:	31 05       	cpc	r19, r1
    213a:	41 f4       	brne	.+16     	; 0x214c <malloc+0xfc>
    213c:	2d b7       	in	r18, 0x3d	; 61
    213e:	3e b7       	in	r19, 0x3e	; 62
    2140:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2144:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2148:	24 1b       	sub	r18, r20
    214a:	35 0b       	sbc	r19, r21
    214c:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <__brkval>
    2150:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <__brkval+0x1>
    2154:	e2 17       	cp	r30, r18
    2156:	f3 07       	cpc	r31, r19
    2158:	a0 f4       	brcc	.+40     	; 0x2182 <malloc+0x132>
    215a:	2e 1b       	sub	r18, r30
    215c:	3f 0b       	sbc	r19, r31
    215e:	28 17       	cp	r18, r24
    2160:	39 07       	cpc	r19, r25
    2162:	78 f0       	brcs	.+30     	; 0x2182 <malloc+0x132>
    2164:	ac 01       	movw	r20, r24
    2166:	4e 5f       	subi	r20, 0xFE	; 254
    2168:	5f 4f       	sbci	r21, 0xFF	; 255
    216a:	24 17       	cp	r18, r20
    216c:	35 07       	cpc	r19, r21
    216e:	48 f0       	brcs	.+18     	; 0x2182 <malloc+0x132>
    2170:	4e 0f       	add	r20, r30
    2172:	5f 1f       	adc	r21, r31
    2174:	50 93 15 03 	sts	0x0315, r21	; 0x800315 <__brkval+0x1>
    2178:	40 93 14 03 	sts	0x0314, r20	; 0x800314 <__brkval>
    217c:	81 93       	st	Z+, r24
    217e:	91 93       	st	Z+, r25
    2180:	9f cf       	rjmp	.-194    	; 0x20c0 <malloc+0x70>
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	e0 e0       	ldi	r30, 0x00	; 0
    2186:	9c cf       	rjmp	.-200    	; 0x20c0 <malloc+0x70>

00002188 <free>:
free():
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	e9 f0       	breq	.+58     	; 0x21ca <free+0x42>
    2190:	fc 01       	movw	r30, r24
    2192:	32 97       	sbiw	r30, 0x02	; 2
    2194:	13 82       	std	Z+3, r1	; 0x03
    2196:	12 82       	std	Z+2, r1	; 0x02
    2198:	a0 91 16 03 	lds	r26, 0x0316	; 0x800316 <__flp>
    219c:	b0 91 17 03 	lds	r27, 0x0317	; 0x800317 <__flp+0x1>
    21a0:	ed 01       	movw	r28, r26
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	10 97       	sbiw	r26, 0x00	; 0
    21a8:	a1 f4       	brne	.+40     	; 0x21d2 <free+0x4a>
    21aa:	20 81       	ld	r18, Z
    21ac:	31 81       	ldd	r19, Z+1	; 0x01
    21ae:	82 0f       	add	r24, r18
    21b0:	93 1f       	adc	r25, r19
    21b2:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <__brkval>
    21b6:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <__brkval+0x1>
    21ba:	28 17       	cp	r18, r24
    21bc:	39 07       	cpc	r19, r25
    21be:	09 f0       	breq	.+2      	; 0x21c2 <free+0x3a>
    21c0:	61 c0       	rjmp	.+194    	; 0x2284 <free+0xfc>
    21c2:	f0 93 15 03 	sts	0x0315, r31	; 0x800315 <__brkval+0x1>
    21c6:	e0 93 14 03 	sts	0x0314, r30	; 0x800314 <__brkval>
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	08 95       	ret
    21d0:	ea 01       	movw	r28, r20
    21d2:	ce 17       	cp	r28, r30
    21d4:	df 07       	cpc	r29, r31
    21d6:	e8 f5       	brcc	.+122    	; 0x2252 <free+0xca>
    21d8:	4a 81       	ldd	r20, Y+2	; 0x02
    21da:	5b 81       	ldd	r21, Y+3	; 0x03
    21dc:	9e 01       	movw	r18, r28
    21de:	41 15       	cp	r20, r1
    21e0:	51 05       	cpc	r21, r1
    21e2:	b1 f7       	brne	.-20     	; 0x21d0 <free+0x48>
    21e4:	e9 01       	movw	r28, r18
    21e6:	fb 83       	std	Y+3, r31	; 0x03
    21e8:	ea 83       	std	Y+2, r30	; 0x02
    21ea:	49 91       	ld	r20, Y+
    21ec:	59 91       	ld	r21, Y+
    21ee:	c4 0f       	add	r28, r20
    21f0:	d5 1f       	adc	r29, r21
    21f2:	ec 17       	cp	r30, r28
    21f4:	fd 07       	cpc	r31, r29
    21f6:	61 f4       	brne	.+24     	; 0x2210 <free+0x88>
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	02 96       	adiw	r24, 0x02	; 2
    21fe:	84 0f       	add	r24, r20
    2200:	95 1f       	adc	r25, r21
    2202:	e9 01       	movw	r28, r18
    2204:	99 83       	std	Y+1, r25	; 0x01
    2206:	88 83       	st	Y, r24
    2208:	82 81       	ldd	r24, Z+2	; 0x02
    220a:	93 81       	ldd	r25, Z+3	; 0x03
    220c:	9b 83       	std	Y+3, r25	; 0x03
    220e:	8a 83       	std	Y+2, r24	; 0x02
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	e0 e0       	ldi	r30, 0x00	; 0
    2214:	12 96       	adiw	r26, 0x02	; 2
    2216:	8d 91       	ld	r24, X+
    2218:	9c 91       	ld	r25, X
    221a:	13 97       	sbiw	r26, 0x03	; 3
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	b9 f5       	brne	.+110    	; 0x228e <free+0x106>
    2220:	2d 91       	ld	r18, X+
    2222:	3c 91       	ld	r19, X
    2224:	11 97       	sbiw	r26, 0x01	; 1
    2226:	cd 01       	movw	r24, r26
    2228:	02 96       	adiw	r24, 0x02	; 2
    222a:	82 0f       	add	r24, r18
    222c:	93 1f       	adc	r25, r19
    222e:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <__brkval>
    2232:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <__brkval+0x1>
    2236:	28 17       	cp	r18, r24
    2238:	39 07       	cpc	r19, r25
    223a:	39 f6       	brne	.-114    	; 0x21ca <free+0x42>
    223c:	30 97       	sbiw	r30, 0x00	; 0
    223e:	51 f5       	brne	.+84     	; 0x2294 <free+0x10c>
    2240:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <__flp+0x1>
    2244:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <__flp>
    2248:	b0 93 15 03 	sts	0x0315, r27	; 0x800315 <__brkval+0x1>
    224c:	a0 93 14 03 	sts	0x0314, r26	; 0x800314 <__brkval>
    2250:	bc cf       	rjmp	.-136    	; 0x21ca <free+0x42>
    2252:	d3 83       	std	Z+3, r29	; 0x03
    2254:	c2 83       	std	Z+2, r28	; 0x02
    2256:	40 81       	ld	r20, Z
    2258:	51 81       	ldd	r21, Z+1	; 0x01
    225a:	84 0f       	add	r24, r20
    225c:	95 1f       	adc	r25, r21
    225e:	c8 17       	cp	r28, r24
    2260:	d9 07       	cpc	r29, r25
    2262:	61 f4       	brne	.+24     	; 0x227c <free+0xf4>
    2264:	4e 5f       	subi	r20, 0xFE	; 254
    2266:	5f 4f       	sbci	r21, 0xFF	; 255
    2268:	88 81       	ld	r24, Y
    226a:	99 81       	ldd	r25, Y+1	; 0x01
    226c:	48 0f       	add	r20, r24
    226e:	59 1f       	adc	r21, r25
    2270:	51 83       	std	Z+1, r21	; 0x01
    2272:	40 83       	st	Z, r20
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	9b 81       	ldd	r25, Y+3	; 0x03
    2278:	93 83       	std	Z+3, r25	; 0x03
    227a:	82 83       	std	Z+2, r24	; 0x02
    227c:	21 15       	cp	r18, r1
    227e:	31 05       	cpc	r19, r1
    2280:	09 f0       	breq	.+2      	; 0x2284 <free+0xfc>
    2282:	b0 cf       	rjmp	.-160    	; 0x21e4 <free+0x5c>
    2284:	f0 93 17 03 	sts	0x0317, r31	; 0x800317 <__flp+0x1>
    2288:	e0 93 16 03 	sts	0x0316, r30	; 0x800316 <__flp>
    228c:	9e cf       	rjmp	.-196    	; 0x21ca <free+0x42>
    228e:	fd 01       	movw	r30, r26
    2290:	dc 01       	movw	r26, r24
    2292:	c0 cf       	rjmp	.-128    	; 0x2214 <free+0x8c>
    2294:	13 82       	std	Z+3, r1	; 0x03
    2296:	12 82       	std	Z+2, r1	; 0x02
    2298:	d7 cf       	rjmp	.-82     	; 0x2248 <free+0xc0>

0000229a <realloc>:
realloc():
    229a:	4f 92       	push	r4
    229c:	5f 92       	push	r5
    229e:	6f 92       	push	r6
    22a0:	7f 92       	push	r7
    22a2:	8f 92       	push	r8
    22a4:	9f 92       	push	r9
    22a6:	af 92       	push	r10
    22a8:	bf 92       	push	r11
    22aa:	cf 92       	push	r12
    22ac:	df 92       	push	r13
    22ae:	ef 92       	push	r14
    22b0:	ff 92       	push	r15
    22b2:	0f 93       	push	r16
    22b4:	1f 93       	push	r17
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	8c 01       	movw	r16, r24
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	99 f4       	brne	.+38     	; 0x22e6 <realloc+0x4c>
    22c0:	cb 01       	movw	r24, r22
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	1f 91       	pop	r17
    22c8:	0f 91       	pop	r16
    22ca:	ff 90       	pop	r15
    22cc:	ef 90       	pop	r14
    22ce:	df 90       	pop	r13
    22d0:	cf 90       	pop	r12
    22d2:	bf 90       	pop	r11
    22d4:	af 90       	pop	r10
    22d6:	9f 90       	pop	r9
    22d8:	8f 90       	pop	r8
    22da:	7f 90       	pop	r7
    22dc:	6f 90       	pop	r6
    22de:	5f 90       	pop	r5
    22e0:	4f 90       	pop	r4
    22e2:	0c 94 28 10 	jmp	0x2050	; 0x2050 <malloc>
    22e6:	fc 01       	movw	r30, r24
    22e8:	e6 0f       	add	r30, r22
    22ea:	f7 1f       	adc	r31, r23
    22ec:	9c 01       	movw	r18, r24
    22ee:	22 50       	subi	r18, 0x02	; 2
    22f0:	31 09       	sbc	r19, r1
    22f2:	e2 17       	cp	r30, r18
    22f4:	f3 07       	cpc	r31, r19
    22f6:	08 f4       	brcc	.+2      	; 0x22fa <realloc+0x60>
    22f8:	ae c0       	rjmp	.+348    	; 0x2456 <realloc+0x1bc>
    22fa:	d9 01       	movw	r26, r18
    22fc:	cd 91       	ld	r28, X+
    22fe:	dc 91       	ld	r29, X
    2300:	11 97       	sbiw	r26, 0x01	; 1
    2302:	c6 17       	cp	r28, r22
    2304:	d7 07       	cpc	r29, r23
    2306:	20 f1       	brcs	.+72     	; 0x2350 <realloc+0xb6>
    2308:	c5 30       	cpi	r28, 0x05	; 5
    230a:	d1 05       	cpc	r29, r1
    230c:	78 f0       	brcs	.+30     	; 0x232c <realloc+0x92>
    230e:	ce 01       	movw	r24, r28
    2310:	04 97       	sbiw	r24, 0x04	; 4
    2312:	86 17       	cp	r24, r22
    2314:	97 07       	cpc	r25, r23
    2316:	50 f0       	brcs	.+20     	; 0x232c <realloc+0x92>
    2318:	c6 1b       	sub	r28, r22
    231a:	d7 0b       	sbc	r29, r23
    231c:	22 97       	sbiw	r28, 0x02	; 2
    231e:	c1 93       	st	Z+, r28
    2320:	d1 93       	st	Z+, r29
    2322:	6d 93       	st	X+, r22
    2324:	7c 93       	st	X, r23
    2326:	cf 01       	movw	r24, r30
    2328:	0e 94 c4 10 	call	0x2188	; 0x2188 <free>
    232c:	c8 01       	movw	r24, r16
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	ff 90       	pop	r15
    2338:	ef 90       	pop	r14
    233a:	df 90       	pop	r13
    233c:	cf 90       	pop	r12
    233e:	bf 90       	pop	r11
    2340:	af 90       	pop	r10
    2342:	9f 90       	pop	r9
    2344:	8f 90       	pop	r8
    2346:	7f 90       	pop	r7
    2348:	6f 90       	pop	r6
    234a:	5f 90       	pop	r5
    234c:	4f 90       	pop	r4
    234e:	08 95       	ret
    2350:	5b 01       	movw	r10, r22
    2352:	ac 1a       	sub	r10, r28
    2354:	bd 0a       	sbc	r11, r29
    2356:	4c 01       	movw	r8, r24
    2358:	8c 0e       	add	r8, r28
    235a:	9d 1e       	adc	r9, r29
    235c:	a0 91 16 03 	lds	r26, 0x0316	; 0x800316 <__flp>
    2360:	b0 91 17 03 	lds	r27, 0x0317	; 0x800317 <__flp+0x1>
    2364:	51 2c       	mov	r5, r1
    2366:	41 2c       	mov	r4, r1
    2368:	f1 2c       	mov	r15, r1
    236a:	e1 2c       	mov	r14, r1
    236c:	10 97       	sbiw	r26, 0x00	; 0
    236e:	31 f5       	brne	.+76     	; 0x23bc <realloc+0x122>
    2370:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <__brkval>
    2374:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <__brkval+0x1>
    2378:	88 15       	cp	r24, r8
    237a:	99 05       	cpc	r25, r9
    237c:	09 f0       	breq	.+2      	; 0x2380 <realloc+0xe6>
    237e:	5c c0       	rjmp	.+184    	; 0x2438 <realloc+0x19e>
    2380:	46 16       	cp	r4, r22
    2382:	57 06       	cpc	r5, r23
    2384:	08 f0       	brcs	.+2      	; 0x2388 <realloc+0xee>
    2386:	58 c0       	rjmp	.+176    	; 0x2438 <realloc+0x19e>
    2388:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    238c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	41 f4       	brne	.+16     	; 0x23a4 <realloc+0x10a>
    2394:	8d b7       	in	r24, 0x3d	; 61
    2396:	9e b7       	in	r25, 0x3e	; 62
    2398:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    239c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    23a0:	84 1b       	sub	r24, r20
    23a2:	95 0b       	sbc	r25, r21
    23a4:	e8 17       	cp	r30, r24
    23a6:	f9 07       	cpc	r31, r25
    23a8:	08 f0       	brcs	.+2      	; 0x23ac <realloc+0x112>
    23aa:	55 c0       	rjmp	.+170    	; 0x2456 <realloc+0x1bc>
    23ac:	f0 93 15 03 	sts	0x0315, r31	; 0x800315 <__brkval+0x1>
    23b0:	e0 93 14 03 	sts	0x0314, r30	; 0x800314 <__brkval>
    23b4:	f9 01       	movw	r30, r18
    23b6:	71 83       	std	Z+1, r23	; 0x01
    23b8:	60 83       	st	Z, r22
    23ba:	b8 cf       	rjmp	.-144    	; 0x232c <realloc+0x92>
    23bc:	8d 91       	ld	r24, X+
    23be:	9c 91       	ld	r25, X
    23c0:	11 97       	sbiw	r26, 0x01	; 1
    23c2:	12 96       	adiw	r26, 0x02	; 2
    23c4:	6c 90       	ld	r6, X
    23c6:	12 97       	sbiw	r26, 0x02	; 2
    23c8:	13 96       	adiw	r26, 0x03	; 3
    23ca:	7c 90       	ld	r7, X
    23cc:	13 97       	sbiw	r26, 0x03	; 3
    23ce:	a8 15       	cp	r26, r8
    23d0:	b9 05       	cpc	r27, r9
    23d2:	59 f5       	brne	.+86     	; 0x242a <realloc+0x190>
    23d4:	6c 01       	movw	r12, r24
    23d6:	42 e0       	ldi	r20, 0x02	; 2
    23d8:	c4 0e       	add	r12, r20
    23da:	d1 1c       	adc	r13, r1
    23dc:	ca 14       	cp	r12, r10
    23de:	db 04       	cpc	r13, r11
    23e0:	20 f1       	brcs	.+72     	; 0x242a <realloc+0x190>
    23e2:	ac 01       	movw	r20, r24
    23e4:	4a 19       	sub	r20, r10
    23e6:	5b 09       	sbc	r21, r11
    23e8:	da 01       	movw	r26, r20
    23ea:	12 96       	adiw	r26, 0x02	; 2
    23ec:	15 97       	sbiw	r26, 0x05	; 5
    23ee:	80 f0       	brcs	.+32     	; 0x2410 <realloc+0x176>
    23f0:	62 82       	std	Z+2, r6	; 0x02
    23f2:	73 82       	std	Z+3, r7	; 0x03
    23f4:	51 83       	std	Z+1, r21	; 0x01
    23f6:	40 83       	st	Z, r20
    23f8:	d9 01       	movw	r26, r18
    23fa:	6d 93       	st	X+, r22
    23fc:	7c 93       	st	X, r23
    23fe:	e1 14       	cp	r14, r1
    2400:	f1 04       	cpc	r15, r1
    2402:	71 f0       	breq	.+28     	; 0x2420 <realloc+0x186>
    2404:	d7 01       	movw	r26, r14
    2406:	13 96       	adiw	r26, 0x03	; 3
    2408:	fc 93       	st	X, r31
    240a:	ee 93       	st	-X, r30
    240c:	12 97       	sbiw	r26, 0x02	; 2
    240e:	8e cf       	rjmp	.-228    	; 0x232c <realloc+0x92>
    2410:	22 96       	adiw	r28, 0x02	; 2
    2412:	8c 0f       	add	r24, r28
    2414:	9d 1f       	adc	r25, r29
    2416:	f9 01       	movw	r30, r18
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	80 83       	st	Z, r24
    241c:	f3 01       	movw	r30, r6
    241e:	ef cf       	rjmp	.-34     	; 0x23fe <realloc+0x164>
    2420:	f0 93 17 03 	sts	0x0317, r31	; 0x800317 <__flp+0x1>
    2424:	e0 93 16 03 	sts	0x0316, r30	; 0x800316 <__flp>
    2428:	81 cf       	rjmp	.-254    	; 0x232c <realloc+0x92>
    242a:	48 16       	cp	r4, r24
    242c:	59 06       	cpc	r5, r25
    242e:	08 f4       	brcc	.+2      	; 0x2432 <realloc+0x198>
    2430:	2c 01       	movw	r4, r24
    2432:	7d 01       	movw	r14, r26
    2434:	d3 01       	movw	r26, r6
    2436:	9a cf       	rjmp	.-204    	; 0x236c <realloc+0xd2>
    2438:	cb 01       	movw	r24, r22
    243a:	0e 94 28 10 	call	0x2050	; 0x2050 <malloc>
    243e:	7c 01       	movw	r14, r24
    2440:	00 97       	sbiw	r24, 0x00	; 0
    2442:	49 f0       	breq	.+18     	; 0x2456 <realloc+0x1bc>
    2444:	ae 01       	movw	r20, r28
    2446:	b8 01       	movw	r22, r16
    2448:	0e 94 2e 12 	call	0x245c	; 0x245c <memcpy>
    244c:	c8 01       	movw	r24, r16
    244e:	0e 94 c4 10 	call	0x2188	; 0x2188 <free>
    2452:	87 01       	movw	r16, r14
    2454:	6b cf       	rjmp	.-298    	; 0x232c <realloc+0x92>
    2456:	10 e0       	ldi	r17, 0x00	; 0
    2458:	00 e0       	ldi	r16, 0x00	; 0
    245a:	68 cf       	rjmp	.-304    	; 0x232c <realloc+0x92>

0000245c <memcpy>:
memcpy():
    245c:	fb 01       	movw	r30, r22
    245e:	dc 01       	movw	r26, r24
    2460:	02 c0       	rjmp	.+4      	; 0x2466 <memcpy+0xa>
    2462:	01 90       	ld	r0, Z+
    2464:	0d 92       	st	X+, r0
    2466:	41 50       	subi	r20, 0x01	; 1
    2468:	50 40       	sbci	r21, 0x00	; 0
    246a:	d8 f7       	brcc	.-10     	; 0x2462 <memcpy+0x6>
    246c:	08 95       	ret

0000246e <strcpy>:
strcpy():
    246e:	fb 01       	movw	r30, r22
    2470:	dc 01       	movw	r26, r24
    2472:	01 90       	ld	r0, Z+
    2474:	0d 92       	st	X+, r0
    2476:	00 20       	and	r0, r0
    2478:	e1 f7       	brne	.-8      	; 0x2472 <strcpy+0x4>
    247a:	08 95       	ret

0000247c <eeprom_read_byte>:
eeprom_read_byte():
    247c:	f9 99       	sbic	0x1f, 1	; 31
    247e:	fe cf       	rjmp	.-4      	; 0x247c <eeprom_read_byte>
    2480:	92 bd       	out	0x22, r25	; 34
    2482:	81 bd       	out	0x21, r24	; 33
    2484:	f8 9a       	sbi	0x1f, 0	; 31
    2486:	99 27       	eor	r25, r25
    2488:	80 b5       	in	r24, 0x20	; 32
    248a:	08 95       	ret

0000248c <eeprom_write_byte>:
eeprom_write_byte():
    248c:	26 2f       	mov	r18, r22

0000248e <eeprom_write_r18>:
    248e:	f9 99       	sbic	0x1f, 1	; 31
    2490:	fe cf       	rjmp	.-4      	; 0x248e <eeprom_write_r18>
    2492:	1f ba       	out	0x1f, r1	; 31
    2494:	92 bd       	out	0x22, r25	; 34
    2496:	81 bd       	out	0x21, r24	; 33
    2498:	20 bd       	out	0x20, r18	; 32
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	fa 9a       	sbi	0x1f, 2	; 31
    24a0:	f9 9a       	sbi	0x1f, 1	; 31
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	08 95       	ret

000024a8 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    24a8:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    24aa:	c6 e8       	ldi	r28, 0x86	; 134
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    24ac:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    24ae:	04 c0       	rjmp	.+8      	; 0x24b8 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    24b0:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    24b2:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    24b6:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    24b8:	c7 38       	cpi	r28, 0x87	; 135
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    24ba:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    24bc:	c9 f7       	brne	.-14     	; 0x24b0 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    24be:	f8 94       	cli

000024c0 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    24c0:	ff cf       	rjmp	.-2      	; 0x24c0 <__stop_program>
